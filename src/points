act.comm.c:         ch->real_abils.rage += 1;
act.comm.c:    if (ch->master)
act.comm.c:      k = ch->master;
act.comm.c:  else if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF))
act.comm.c:      tch = tch->next;
act.comm.c:  if (!ch->desc)
act.comm.c:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
act.comm.c:    if (!(pen = get_obj_in_list_vis(ch, penname, ch->carrying))) {
act.comm.c:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
act.comm.c:     ch->desc->backstr = NULL;
act.comm.c:	ch->desc->backstr = str_dup(paper->action_description);
act.comm.c:    ch->desc->str = &paper->action_description;
act.comm.c:    ch->desc->max_str = MAX_NOTE_LENGTH;
act.comm.c:  if (!ch->desc)
act.comm.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF)) {
act.comm.c:if (!str_cmp(ch->player.name, "Tuskino"))
act.comm.c:else if (!str_cmp(ch->player.name, "Xylam"))
act.comm.c:else if (!str_cmp(ch->player.name, "Griff"))
act.comm.c:    if (STATE(i) == CON_PLAYING && i != ch->desc && i->character &&
act.comm.c:	  ((world[ch->in_room].zone != world[i->character->in_room].zone) ||
act.comm.c:      if (STATE(i) == CON_PLAYING && i != ch->desc &&
act.comm.c.save:         ch->real_abils.rage += 2;
act.comm.c.save:    if (ch->master)
act.comm.c.save:      k = ch->master;
act.comm.c.save:  else if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF))
act.comm.c.save:      tch = tch->next;
act.comm.c.save:  if (!ch->desc)
act.comm.c.save:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
act.comm.c.save:    if (!(pen = get_obj_in_list_vis(ch, penname, ch->carrying))) {
act.comm.c.save:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
act.comm.c.save:     ch->desc->backstr = NULL;
act.comm.c.save:	ch->desc->backstr = str_dup(paper->action_description);
act.comm.c.save:    ch->desc->str = &paper->action_description;
act.comm.c.save:    ch->desc->max_str = MAX_NOTE_LENGTH;
act.comm.c.save:  if (!ch->desc)
act.comm.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF)) {
act.comm.c.save:    if (STATE(i) == CON_PLAYING && i != ch->desc && i->character &&
act.comm.c.save:	  ((world[ch->in_room].zone != world[i->character->in_room].zone) ||
act.comm.c.save:      if (STATE(i) == CON_PLAYING && i != ch->desc &&
act.informative.:	page_string(ch->desc, buf, 1);
act.informative.:  page_string(ch->desc, buf, TRUE);
act.informative.:  if (!ch->desc)
act.informative.:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
act.informative.:  if (!ch->desc)
act.informative.:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
act.informative.:  send_to_char(world[ch->in_room].name, ch);
act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
act.informative.:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
act.informative.:    send_to_char(world[ch->in_room].description, ch);
act.informative.:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
act.informative.:  list_char_to_char(world[ch->in_room].people, ch);
act.informative.:  if (!ch->desc)
act.informative.:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
act.informative.:    page_string(ch->desc, desc, FALSE);
act.informative.:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
act.informative.:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
act.informative.:  if (!ch->desc)
act.informative.:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
act.informative.:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
act.informative.:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
act.informative.:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
act.informative.:  if (!ch->desc)
act.informative.:    page_string(ch->desc, help, 0);
act.informative.:  page_string(ch->desc, entry, 0);
act.informative.:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
act.informative.:    if (who_room && (tch->in_room != ch->in_room))
act.informative.://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.:/*      if (!str_cmp(ch->player.name, "Tuskino") && GET_SEX(tch) == SEX_MALE && GET_LEVEL(tch) == LVL_IMPL)
act.informative.:      if (!str_cmp(ch->player.name, "Misato") && GET_SEX(tch) == SEX_FEMALE)
act.informative.:      if (!str_cmp(ch->player.name, "Zero") && GET_SEX(tch) == SEX_MALE && GET_LEVEL(tch) == LVL_IMPL)
act.informative.:    page_string(ch->desc, credits, 0);
act.informative.:    page_string(ch->desc, news, 0);
act.informative.:    page_string(ch->desc, info, 0);
act.informative.:    page_string(ch->desc, wizlist, 0);
act.informative.:    page_string(ch->desc, immlist, 0);
act.informative.:    page_string(ch->desc, handbook, 0);
act.informative.:    page_string(ch->desc, policies, 0);
act.informative.:    page_string(ch->desc, motd, 0);
act.informative.:    page_string(ch->desc, imotd, 0);
act.informative.:      if (world[ch->in_room].zone != world[i->in_room].zone)
act.informative.:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
act.informative.:         ch->real_abils.ubs += 1;
act.informative.:         ch->real_abils.lbs -= 1;
act.informative.:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.:         ch->real_abils.ubs += 1;
act.informative.:         ch->real_abils.lbs -= 1;
act.informative.:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.:  is_in = ch->in_room;
act.informative.:    ch->in_room = is_in;
act.informative.:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
act.informative.:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
act.informative.:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
act.informative.:  ch->in_room = is_in;
act.informative.:         ch->real_abils.ubs += 1;
act.informative.:         ch->real_abils.lbs -= 1;
act.informative.:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.:  page_string(ch->desc, buf, 1);
act.informative.c:	page_string(ch->desc, buf, 1);
act.informative.c:  page_string(ch->desc, buf, TRUE);
act.informative.c:  if (!ch->desc)
act.informative.c:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
act.informative.c:  if (!ch->desc)
act.informative.c:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.c:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
act.informative.c:  send_to_char(world[ch->in_room].name, ch);
act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
act.informative.c:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
act.informative.c:    send_to_char(world[ch->in_room].description, ch);
act.informative.c:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
act.informative.c:  list_char_to_char(world[ch->in_room].people, ch);
act.informative.c:  if (!ch->desc)
act.informative.c:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
act.informative.c:    page_string(ch->desc, desc, FALSE);
act.informative.c:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
act.informative.c:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
act.informative.c:  if (!ch->desc)
act.informative.c:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.c:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
act.informative.c:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
act.informative.c:  if (!ch->desc)
act.informative.c:    page_string(ch->desc, help, 0);
act.informative.c:  page_string(ch->desc, entry, 0);
act.informative.c:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
act.informative.c:    if (who_room && (tch->in_room != ch->in_room))
act.informative.c:       if (!str_cmp(tch->player.name, "Iovan"))
act.informative.c:       if (!str_cmp(tch->player.name, "Kuvoc"))
act.informative.c:       if (!str_cmp(tch->player.name, "Lilia"))
act.informative.c:       if (!str_cmp(tch->player.name, "Solbet"))
act.informative.c:       if (!str_cmp(tch->player.name, "Grubby"))
act.informative.c:       if (!str_cmp(tch->player.name, "Xyron"))
act.informative.c:       if (!str_cmp(tch->player.name, "Shou"))
act.informative.c:    page_string(ch->desc, credits, 0);
act.informative.c:    page_string(ch->desc, news, 0);
act.informative.c:    page_string(ch->desc, info, 0);
act.informative.c:    page_string(ch->desc, wizlist, 0);
act.informative.c:    page_string(ch->desc, immlist, 0);
act.informative.c:    page_string(ch->desc, handbook, 0);
act.informative.c:    page_string(ch->desc, policies, 0);
act.informative.c:    page_string(ch->desc, motd, 0);
act.informative.c:    page_string(ch->desc, imotd, 0);
act.informative.c:      if (world[ch->in_room].zone != world[i->in_room].zone)
act.informative.c:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
act.informative.c:         ch->real_abils.ubs += 1;
act.informative.c:         ch->real_abils.lbs -= 1;
act.informative.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/200)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MANA(ch) >= GET_MAX_MANA(ch)/150)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MANA(ch) >= GET_MAX_MANA(ch)/100)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MANA(ch) >= GET_MAX_MANA(ch)/75)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c:         ch->real_abils.ubs += 1;
act.informative.c:         ch->real_abils.lbs -= 1;
act.informative.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/200)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MANA(ch) >= GET_MAX_MANA(ch)/150)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MANA(ch) >= GET_MAX_MANA(ch)/100)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MANA(ch) >= GET_MAX_MANA(ch)/75)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c:  is_in = ch->in_room;
act.informative.c:    ch->in_room = is_in;
act.informative.c:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
act.informative.c:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
act.informative.c:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
act.informative.c:  ch->in_room = is_in;
act.informative.c:         ch->real_abils.ubs += 1;
act.informative.c:         ch->real_abils.lbs -= 1;
act.informative.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c:  page_string(ch->desc, buf, 1);
act.informative.c~:	page_string(ch->desc, buf, 1);
act.informative.c~:  page_string(ch->desc, buf, TRUE);
act.informative.c~:  if (!ch->desc)
act.informative.c~:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
act.informative.c~:  if (!ch->desc)
act.informative.c~:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.c~:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
act.informative.c~:	    world[ch->in_room].name, buf);
act.informative.c~:  send_to_char(world[ch->in_room].name, ch);
act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HVLOW)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HLOW)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HMED)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HHIGH)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HVHIGH)) {
act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HNOLIM)) {
act.informative.c~:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
act.informative.c~:    send_to_char(world[ch->in_room].description, ch);
act.informative.c~:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
act.informative.c~:  list_char_to_char(world[ch->in_room].people, ch);
act.informative.c~:  if (!ch->desc)
act.informative.c~:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
act.informative.c~:    page_string(ch->desc, desc, FALSE);
act.informative.c~:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
act.informative.c~:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
act.informative.c~:  if (!ch->desc)
act.informative.c~:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.c~:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
act.informative.c~:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
act.informative.c~:  if (!ch->desc)
act.informative.c~:    page_string(ch->desc, help, 0);
act.informative.c~:  page_string(ch->desc, entry, 0);
act.informative.c~:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
act.informative.c~:    if (who_room && (tch->in_room != ch->in_room))
act.informative.c~:    page_string(ch->desc, credits, 0);
act.informative.c~:    page_string(ch->desc, news, 0);
act.informative.c~:    page_string(ch->desc, info, 0);
act.informative.c~:    page_string(ch->desc, wizlist, 0);
act.informative.c~:    page_string(ch->desc, immlist, 0);
act.informative.c~:    page_string(ch->desc, handbook, 0);
act.informative.c~:    page_string(ch->desc, policies, 0);
act.informative.c~:    page_string(ch->desc, motd, 0);
act.informative.c~:    page_string(ch->desc, imotd, 0);
act.informative.c~:      if (world[ch->in_room].zone != world[i->in_room].zone)
act.informative.c~:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
act.informative.c~:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c~:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c~:  is_in = ch->in_room;
act.informative.c~:    ch->in_room = is_in;
act.informative.c~:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
act.informative.c~:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
act.informative.c~:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
act.informative.c~:  ch->in_room = is_in;
act.informative.ch:	page_string(ch->desc, buf, 1);
act.informative.ch:  page_string(ch->desc, buf, TRUE);
act.informative.ch:  if (!ch->desc)
act.informative.ch:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
act.informative.ch:  if (!ch->desc)
act.informative.ch:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.ch:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
act.informative.ch:  send_to_char(world[ch->in_room].name, ch);
act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
act.informative.ch:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
act.informative.ch:    send_to_char(world[ch->in_room].description, ch);
act.informative.ch:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
act.informative.ch:  list_char_to_char(world[ch->in_room].people, ch);
act.informative.ch:  if (!ch->desc)
act.informative.ch:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
act.informative.ch:    page_string(ch->desc, desc, FALSE);
act.informative.ch:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
act.informative.ch:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
act.informative.ch:  if (!ch->desc)
act.informative.ch:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.ch:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
act.informative.ch:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
act.informative.ch:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
act.informative.ch:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
act.informative.ch:  if (!ch->desc)
act.informative.ch:    page_string(ch->desc, help, 0);
act.informative.ch:  page_string(ch->desc, entry, 0);
act.informative.ch:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
act.informative.ch:    if (who_room && (tch->in_room != ch->in_room))
act.informative.ch://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.ch://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.ch:       if (!str_cmp(tch->player.name, "Tuskino"))
act.informative.ch:       if (!str_cmp(tch->player.name, "Gohorin"))
act.informative.ch:       if (!str_cmp(tch->player.name, "Heaven"))
act.informative.ch:    page_string(ch->desc, credits, 0);
act.informative.ch:    page_string(ch->desc, news, 0);
act.informative.ch:    page_string(ch->desc, info, 0);
act.informative.ch:    page_string(ch->desc, wizlist, 0);
act.informative.ch:    page_string(ch->desc, immlist, 0);
act.informative.ch:    page_string(ch->desc, handbook, 0);
act.informative.ch:    page_string(ch->desc, policies, 0);
act.informative.ch:    page_string(ch->desc, motd, 0);
act.informative.ch:    page_string(ch->desc, imotd, 0);
act.informative.ch:      if (world[ch->in_room].zone != world[i->in_room].zone)
act.informative.ch:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
act.informative.ch:         ch->real_abils.ubs += 1;
act.informative.ch:         ch->real_abils.lbs -= 1;
act.informative.ch:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.ch:         ch->real_abils.ubs += 1;
act.informative.ch:         ch->real_abils.lbs -= 1;
act.informative.ch:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.ch:  is_in = ch->in_room;
act.informative.ch:    ch->in_room = is_in;
act.informative.ch:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
act.informative.ch:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
act.informative.ch:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
act.informative.ch:  ch->in_room = is_in;
act.informative.ch:         ch->real_abils.ubs += 1;
act.informative.ch:         ch->real_abils.lbs -= 1;
act.informative.ch:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.ch:  page_string(ch->desc, buf, 1);
act.informative.c.save:	page_string(ch->desc, buf, 1);
act.informative.c.save:  page_string(ch->desc, buf, TRUE);
act.informative.c.save:  if (!ch->desc)
act.informative.c.save:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
act.informative.c.save:  if (!ch->desc)
act.informative.c.save:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.c.save:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
act.informative.c.save:  send_to_char(world[ch->in_room].name, ch);
act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
act.informative.c.save:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
act.informative.c.save:    send_to_char(world[ch->in_room].description, ch);
act.informative.c.save:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
act.informative.c.save:  list_char_to_char(world[ch->in_room].people, ch);
act.informative.c.save:  if (!ch->desc)
act.informative.c.save:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
act.informative.c.save:    page_string(ch->desc, desc, FALSE);
act.informative.c.save:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
act.informative.c.save:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
act.informative.c.save:  if (!ch->desc)
act.informative.c.save:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.c.save:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
act.informative.c.save:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
act.informative.c.save:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
act.informative.c.save:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
act.informative.c.save:  if (!ch->desc)
act.informative.c.save:    page_string(ch->desc, help, 0);
act.informative.c.save:  page_string(ch->desc, entry, 0);
act.informative.c.save:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
act.informative.c.save:    if (who_room && (tch->in_room != ch->in_room))
act.informative.c.save://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.c.save://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.c.save:       if (!str_cmp(tch->player.name, "Raiden"))
act.informative.c.save:       if (!str_cmp(tch->player.name, "Tuskino"))
act.informative.c.save:       if (!str_cmp(tch->player.name, "Gohorin"))
act.informative.c.save:       if (!str_cmp(tch->player.name, "Rain"))
act.informative.c.save:       if (!str_cmp(tch->player.name, "Misato"))
act.informative.c.save:       if (!str_cmp(tch->player.name, "1Hiro"))
act.informative.c.save:    page_string(ch->desc, credits, 0);
act.informative.c.save:    page_string(ch->desc, news, 0);
act.informative.c.save:    page_string(ch->desc, info, 0);
act.informative.c.save:    page_string(ch->desc, wizlist, 0);
act.informative.c.save:    page_string(ch->desc, immlist, 0);
act.informative.c.save:    page_string(ch->desc, handbook, 0);
act.informative.c.save:    page_string(ch->desc, policies, 0);
act.informative.c.save:    page_string(ch->desc, motd, 0);
act.informative.c.save:    page_string(ch->desc, imotd, 0);
act.informative.c.save:      if (world[ch->in_room].zone != world[i->in_room].zone)
act.informative.c.save:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
act.informative.c.save:         ch->real_abils.ubs += 1;
act.informative.c.save:         ch->real_abils.lbs -= 1;
act.informative.c.save:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c.save:         ch->real_abils.ubs += 1;
act.informative.c.save:         ch->real_abils.lbs -= 1;
act.informative.c.save:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c.save:  is_in = ch->in_room;
act.informative.c.save:    ch->in_room = is_in;
act.informative.c.save:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
act.informative.c.save:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
act.informative.c.save:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
act.informative.c.save:  ch->in_room = is_in;
act.informative.c.save:         ch->real_abils.ubs += 1;
act.informative.c.save:         ch->real_abils.lbs -= 1;
act.informative.c.save:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.c.save:  page_string(ch->desc, buf, 1);
act.informative.ctuskino:	page_string(ch->desc, buf, 1);
act.informative.ctuskino:  page_string(ch->desc, buf, TRUE);
act.informative.ctuskino:  if (!ch->desc)
act.informative.ctuskino:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
act.informative.ctuskino:  if (!ch->desc)
act.informative.ctuskino:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.ctuskino:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
act.informative.ctuskino:  send_to_char(world[ch->in_room].name, ch);
act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
act.informative.ctuskino:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
act.informative.ctuskino:    send_to_char(world[ch->in_room].description, ch);
act.informative.ctuskino:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
act.informative.ctuskino:  list_char_to_char(world[ch->in_room].people, ch);
act.informative.ctuskino:  if (!ch->desc)
act.informative.ctuskino:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
act.informative.ctuskino:    page_string(ch->desc, desc, FALSE);
act.informative.ctuskino:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
act.informative.ctuskino:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
act.informative.ctuskino:  if (!ch->desc)
act.informative.ctuskino:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
act.informative.ctuskino:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
act.informative.ctuskino:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
act.informative.ctuskino:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
act.informative.ctuskino:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
act.informative.ctuskino:  if (!ch->desc)
act.informative.ctuskino:    page_string(ch->desc, help, 0);
act.informative.ctuskino:  page_string(ch->desc, entry, 0);
act.informative.ctuskino:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
act.informative.ctuskino:    if (who_room && (tch->in_room != ch->in_room))
act.informative.ctuskino://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.ctuskino://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
act.informative.ctuskino:       if (!str_cmp(tch->player.name, "Tuskino"))
act.informative.ctuskino:       if (!str_cmp(tch->player.name, "Gohorin"))
act.informative.ctuskino:       if (!str_cmp(tch->player.name, "Heaven"))
act.informative.ctuskino:    page_string(ch->desc, credits, 0);
act.informative.ctuskino:    page_string(ch->desc, news, 0);
act.informative.ctuskino:    page_string(ch->desc, info, 0);
act.informative.ctuskino:    page_string(ch->desc, wizlist, 0);
act.informative.ctuskino:    page_string(ch->desc, immlist, 0);
act.informative.ctuskino:    page_string(ch->desc, handbook, 0);
act.informative.ctuskino:    page_string(ch->desc, policies, 0);
act.informative.ctuskino:    page_string(ch->desc, motd, 0);
act.informative.ctuskino:    page_string(ch->desc, imotd, 0);
act.informative.ctuskino:      if (world[ch->in_room].zone != world[i->in_room].zone)
act.informative.ctuskino:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
act.informative.ctuskino:         ch->real_abils.ubs += 1;
act.informative.ctuskino:         ch->real_abils.lbs -= 1;
act.informative.ctuskino:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.ctuskino:         ch->real_abils.ubs += 1;
act.informative.ctuskino:         ch->real_abils.lbs -= 1;
act.informative.ctuskino:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.ctuskino:  is_in = ch->in_room;
act.informative.ctuskino:    ch->in_room = is_in;
act.informative.ctuskino:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
act.informative.ctuskino:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
act.informative.ctuskino:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
act.informative.ctuskino:  ch->in_room = is_in;
act.informative.ctuskino:         ch->real_abils.ubs += 1;
act.informative.ctuskino:         ch->real_abils.lbs -= 1;
act.informative.ctuskino:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
act.informative.ctuskino:  page_string(ch->desc, buf, 1);
act.item.c:	if (!(obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
act.item.c:	for (obj = ch->carrying; obj; obj = next_obj) {
act.item.c:    if (!(obj = get_obj_in_list_vis(ch, arg, world[ch->in_room].contents))) {
act.item.c:    for (obj = world[ch->in_room].contents; obj; obj = next_obj) {
act.item.c:      for (cont = ch->carrying; cont; cont = cont->next_content)
act.item.c:      for (cont = world[ch->in_room].contents; cont; cont = cont->next_content)
act.item.c:	obj_to_room(obj, ch->in_room);
act.item.c:    obj_to_room(obj, ch->in_room);
act.item.c:      if (!ch->carrying)
act.item.c:	for (obj = ch->carrying; obj; obj = next_obj) {
act.item.c:      if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.item.c:      if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.item.c:      if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.item.c:      if (!ch->carrying)
act.item.c:	for (obj = ch->carrying; obj; obj = next_obj) {
act.item.c:  if (!(temp = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.item.c:    if (!(temp = get_obj_in_list_vis(ch, arg, world[ch->in_room].contents))) {
act.item.c:  if (!(food = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.item.c:    if (!(from_obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
act.item.c:    if (!(to_obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
act.item.c:    if (!(from_obj = get_obj_in_list_vis(ch, arg2, world[ch->in_room].contents))) {
act.item.c:    if (!(to_obj = get_obj_in_list_vis(ch, arg2, ch->carrying))) {
act.item.c:    for (obj = ch->carrying; obj; obj = next_obj) {
act.item.c:    if (!(obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
act.item.c:    if (!(obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
act.item.c:  else if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.item.c:  else if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.item.c:    if (!(obj = get_object_in_equip_vis(ch, arg, ch->equipment, &i))) {
act.movement.c:  if (ROOM_IDENTITY(ch->in_room) == DEAD_SEA)
act.movement.c:  for (obj = ch->carrying; obj; obj = obj->next_content)
act.movement.c:  if (AFF_FLAGGED(ch, AFF_MAJIN) && ch->master && ch->in_room == ch->master->in_room) {
act.movement.c:         ch->real_abils.ubs -= 1;
act.movement.c:         ch->real_abils.lbs += 1;
act.movement.c:         ch->real_abils.dex += 1;
act.movement.c:  if ((SECT(ch->in_room) == SECT_WATER_NOSWIM) ||
act.movement.c:  need_movement = (movement_loss[SECT(ch->in_room)] +
act.movement.c:    if (need_specials_check && ch->master)
act.movement.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_ATRIUM)) {
act.movement.c:  was_in = ch->in_room;
act.movement.c:  if (ch->desc != NULL)
act.movement.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_DEATH) && GET_LEVEL(ch) < LVL_IMMORT) {
act.movement.c:    if (!ch->followers)
act.movement.c:    was_in = ch->in_room;
act.movement.c:    for (k = ch->followers; k; k = next) {
act.movement.c:  for (o = ch->carrying; o; o = o->next_content)
act.movement.c:      if (back->to_room != ch->in_room)
act.movement.c:    OPEN_DOOR(ch->in_room, obj, door);
act.movement.c:    LOCK_DOOR(ch->in_room, obj, door);
act.movement.c:    LOCK_DOOR(ch->in_room, obj, door);
act.movement.c:  } else if (ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
act.movement.c:  if (!ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
act.movement.c:  if (ch->master == leader) {
act.movement.c:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master)) {
act.movement.c:    act("But you only feel like following $N!", FALSE, ch, 0, ch->master, TO_CHAR);
act.movement.c:      if (!ch->master) {
act.movement.c:      if (ch->master)
act.movement.c.save:  if (ROOM_IDENTITY(ch->in_room) == DEAD_SEA)
act.movement.c.save:  for (obj = ch->carrying; obj; obj = obj->next_content)
act.movement.c.save:  if (AFF_FLAGGED(ch, AFF_MAJIN) && ch->master && ch->in_room == ch->master->in_room) {
act.movement.c.save:         ch->real_abils.ubs -= 1;
act.movement.c.save:         ch->real_abils.lbs += 1;
act.movement.c.save:         ch->real_abils.dex += 1;
act.movement.c.save:  if ((SECT(ch->in_room) == SECT_WATER_NOSWIM) ||
act.movement.c.save:  need_movement = (movement_loss[SECT(ch->in_room)] +
act.movement.c.save:    if (need_specials_check && ch->master)
act.movement.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_ATRIUM)) {
act.movement.c.save:  was_in = ch->in_room;
act.movement.c.save:  if (ch->desc != NULL)
act.movement.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_DEATH) && GET_LEVEL(ch) < LVL_IMMORT) {
act.movement.c.save:    if (!ch->followers)
act.movement.c.save:    was_in = ch->in_room;
act.movement.c.save:    for (k = ch->followers; k; k = next) {
act.movement.c.save:  for (o = ch->carrying; o; o = o->next_content)
act.movement.c.save:      if (back->to_room != ch->in_room)
act.movement.c.save:    OPEN_DOOR(ch->in_room, obj, door);
act.movement.c.save:    LOCK_DOOR(ch->in_room, obj, door);
act.movement.c.save:    LOCK_DOOR(ch->in_room, obj, door);
act.movement.c.save:  } else if (ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
act.movement.c.save:  if (!ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
act.movement.c.save:       if  (!str_cmp(ch->name,"Erimas")) {
act.movement.c.save:    ch->points.max_hit = 30000;
act.movement.c.save:    ch->points.max_mana = 30000;
act.movement.c.save:    ch->points.max_move = 30000;
act.movement.c.save:  if (ch->master == leader) {
act.movement.c.save:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master)) {
act.movement.c.save:    act("But you only feel like following $N!", FALSE, ch, 0, ch->master, TO_CHAR);
act.movement.c.save:      if (!ch->master) {
act.movement.c.save:      if (ch->master)
act.offensive.c:      for (opponent = world[ch->in_room].people;
act.offensive.c:  } else if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == vict))
act.offensive.c:      if (AFF_FLAGGED(ch, AFF_MAJIN) && !IS_NPC(ch->master) && !IS_NPC(vict))
act.offensive.c:      org_room = ch->in_room;
act.offensive.c:      for (k = ch->followers; k; k = k->next) {
act.offensive.c:  for (tmp_ch = world[ch->in_room].people; tmp_ch &&
act.offensive.c:       (FIGHTING(tmp_ch) != vict); tmp_ch = tmp_ch->next_in_room);
act.offensive.c.save:      for (opponent = world[ch->in_room].people;
act.offensive.c.save:  } else if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == vict))
act.offensive.c.save:      if (AFF_FLAGGED(ch, AFF_MAJIN) && !IS_NPC(ch->master) && !IS_NPC(vict))
act.offensive.c.save:      org_room = ch->in_room;
act.offensive.c.save:      for (k = ch->followers; k; k = k->next) {
act.offensive.c.save:  for (tmp_ch = world[ch->in_room].people; tmp_ch &&
act.offensive.c.save:       (FIGHTING(tmp_ch) != vict); tmp_ch = tmp_ch->next_in_room);
act.other.c:  if (IS_NPC(ch) || !ch->desc)
act.other.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
act.other.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF))
act.other.c:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
act.other.c:      if (d == ch->desc)
act.other.c:   save_room = ch->in_room;
act.other.c:  if (IS_NPC(ch) || !ch->desc)
act.other.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
act.other.c:    k = (ch->master ? ch->master : ch);
act.other.c:  if (ch->master) {
act.other.c:    for (found = 0, f = ch->followers; f; f = f->next)
act.other.c:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
act.other.c:    for (f = ch->followers; f; f = next_fol) {
act.other.c:  if (tch->master != ch) {
act.other.c:  k = (ch->master ? ch->master : ch);
act.other.c:    k = (ch->master ? ch->master : ch);
act.other.c:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
act.other.c:	  (f->follower->in_room == ch->in_room))
act.other.c:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
act.other.c:	  (f->follower->in_room == ch->in_room) &&
act.other.c:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.other.c:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.other.c:  if (!*argument && ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL))
act.other.c:  else if (!*argument && !ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
act.other.c:    if (!str_cmp(arg,"ki") && !ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
act.other.c:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c:  if (!str_cmp(arg,"hp") && !ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
act.other.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SOUNDPROOF))
act.other.c:else if (!str_cmp(ch->player.name, "jimmybobstuff8750850875") && GET_LEVEL(ch) < 1000014)
act.other.c:else if (!str_cmp(ch->player.name, "joe65497497") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c:else if (!str_cmp(ch->player.name, "mcdallleybob") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c:else if (!str_cmp(ch->player.name, "87508658758569698") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c:    if (!(obj1 = get_obj_in_list_vis(ch, arg1, ch->carrying)))
act.other.c:	for (obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content)
act.other.c:    else if (!(obj2 = get_obj_in_list_vis(ch, arg2, ch->carrying)))
act.other.c.:  if (IS_NPC(ch) || !ch->desc)
act.other.c.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
act.other.c.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_NOQUIT))
act.other.c.:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
act.other.c.:      if (d == ch->desc)
act.other.c.:   save_room = ch->in_room;
act.other.c.:  if (IS_NPC(ch) || !ch->desc)
act.other.c.:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
act.other.c.:    k = (ch->master ? ch->master : ch);
act.other.c.:  if (ch->master) {
act.other.c.:    for (found = 0, f = ch->followers; f; f = f->next)
act.other.c.:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
act.other.c.:    for (f = ch->followers; f; f = next_fol) {
act.other.c.:  if (tch->master != ch) {
act.other.c.:  k = (ch->master ? ch->master : ch);
act.other.c.:    k = (ch->master ? ch->master : ch);
act.other.c.:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
act.other.c.:	  (f->follower->in_room == ch->in_room))
act.other.c.:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
act.other.c.:	  (f->follower->in_room == ch->in_room) &&
act.other.c.:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.other.c.:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.other.c.:  if (!*argument && IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
act.other.c.:  else if (!*argument && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.:    if (!str_cmp(arg,"ki") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.:  if (!str_cmp(arg,"hp") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.:  else if (!str_cmp(ch->player.name, "Misato") && GET_LEVEL(ch) < LVL_ARCANE)
act.other.c.:  else if (!str_cmp(ch->player.name, "Heaven") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) == LVL_IMPL)
act.other.c.org:  if (IS_NPC(ch) || !ch->desc)
act.other.c.org:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
act.other.c.org:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_NOQUIT))
act.other.c.org:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
act.other.c.org:      if (d == ch->desc)
act.other.c.org:   save_room = ch->in_room;
act.other.c.org:  if (IS_NPC(ch) || !ch->desc)
act.other.c.org:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
act.other.c.org:    k = (ch->master ? ch->master : ch);
act.other.c.org:  if (ch->master) {
act.other.c.org:    for (found = 0, f = ch->followers; f; f = f->next)
act.other.c.org:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
act.other.c.org:    for (f = ch->followers; f; f = next_fol) {
act.other.c.org:  if (tch->master != ch) {
act.other.c.org:  k = (ch->master ? ch->master : ch);
act.other.c.org:    k = (ch->master ? ch->master : ch);
act.other.c.org:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
act.other.c.org:	  (f->follower->in_room == ch->in_room))
act.other.c.org:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
act.other.c.org:	  (f->follower->in_room == ch->in_room) &&
act.other.c.org:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.other.c.org:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.org:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.other.c.org:  if (!*argument && IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
act.other.c.org:  else if (!*argument && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.org:    if (!str_cmp(arg,"ki") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.org:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.org:  if (!str_cmp(arg,"hp") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.org:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.org:  else if (!str_cmp(ch->player.name, "Misato") && GET_LEVEL(ch) < LVL_ARCANE)
act.other.c.org:  else if (!str_cmp(ch->player.name, "Heaven") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.org:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) == LVL_IMPL)
act.other.c.save:  if (IS_NPC(ch) || !ch->desc)
act.other.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
act.other.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_NOQUIT))
act.other.c.save:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
act.other.c.save:      if (d == ch->desc)
act.other.c.save:   save_room = ch->in_room;
act.other.c.save:  if (IS_NPC(ch) || !ch->desc)
act.other.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
act.other.c.save:    k = (ch->master ? ch->master : ch);
act.other.c.save:  if (ch->master) {
act.other.c.save:    for (found = 0, f = ch->followers; f; f = f->next)
act.other.c.save:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
act.other.c.save:    for (f = ch->followers; f; f = next_fol) {
act.other.c.save:  if (tch->master != ch) {
act.other.c.save:  k = (ch->master ? ch->master : ch);
act.other.c.save:    k = (ch->master ? ch->master : ch);
act.other.c.save:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
act.other.c.save:	  (f->follower->in_room == ch->in_room))
act.other.c.save:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
act.other.c.save:	  (f->follower->in_room == ch->in_room) &&
act.other.c.save:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
act.other.c.save:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
act.other.c.save:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.other.c.save:  if (!*argument && IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
act.other.c.save:  else if (!*argument && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.save:    if (!str_cmp(arg,"ki") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.save:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.save:  if (!str_cmp(arg,"hp") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
act.other.c.save:else if (!str_cmp(ch->player.name, "Jim070050875087474798") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.save:else if (!str_cmp(ch->player.name, "Xylam") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.save:else if (!str_cmp(ch->player.name, "Galan") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.save:else if (!str_cmp(ch->player.name, "Hiro") && GET_LEVEL(ch) < LVL_IMPL)
act.other.c.save:    if (!(obj1 = get_obj_in_list_vis(ch, arg1, ch->carrying)))
act.other.c.save:	for (obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content)
act.other.c.save:    else if (!(obj2 = get_obj_in_list_vis(ch, arg2, ch->carrying)))
act.social.c:	((targ = get_obj_in_list_vis(ch, buf, ch->carrying)) ||
act.social.c:	(targ = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents)))) {
act.wizard.c:  original_loc = ch->in_room;
act.wizard.c:  if (ch->in_room == location) {
act.wizard.c:      char_to_room(victim, ch->in_room);
act.wizard.c:        char_to_room(victim, ch->in_room);
act.wizard.c:  struct room_data *rm = &world[ch->in_room];
act.wizard.c:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
act.wizard.c:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
act.wizard.c:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
act.wizard.c:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
act.wizard.c:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c:  if (!ch->desc->snooping)
act.wizard.c:    ch->desc->snooping->snoop_by = NULL;
act.wizard.c:    ch->desc->snooping = NULL;
act.wizard.c:  if (!ch->desc)
act.wizard.c:  else if (victim->desc->snooping == ch->desc)
act.wizard.c:    if (ch->desc->snooping)
act.wizard.c:      ch->desc->snooping->snoop_by = NULL;
act.wizard.c:    ch->desc->snooping = victim->desc;
act.wizard.c:    victim->desc->snoop_by = ch->desc;
act.wizard.c:  if (ch->desc->original)
act.wizard.c:    ch->desc->character = victim;
act.wizard.c:    ch->desc->original = ch;
act.wizard.c:    victim->desc = ch->desc;
act.wizard.c:    ch->desc = NULL;
act.wizard.c:  if (ch->desc && ch->desc->original) {
act.wizard.c:    if (ch->desc->original->desc)
act.wizard.c:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
act.wizard.c:    ch->desc->character = ch->desc->original;
act.wizard.c:    ch->desc->original = NULL;
act.wizard.c:    ch->desc->character->desc = ch->desc;
act.wizard.c:    ch->desc = NULL;
act.wizard.c:    char_to_room(mob, ch->in_room);
act.wizard.c:      obj_to_room(obj, ch->in_room);
act.wizard.c:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
act.wizard.c:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
act.wizard.c:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
act.wizard.c:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
act.wizard.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
act.wizard.c:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
act.wizard.c:/*else if (!str_cmp(ch->player.name, "Tuskino"))
act.wizard.c:else if (!str_cmp(ch->player.name, "Misato"))
act.wizard.c:else if (!str_cmp(ch->player.name, "Griff"))
act.wizard.c:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
act.wizard.c:    i = world[ch->in_room].zone;
act.wizard.c:      print_zone_to_buf(buf, world[ch->in_room].zone);
act.wizard.c:    page_string(ch->desc, buf, TRUE);
act.wizard.c:    page_string(ch->desc, buf, TRUE);
act.wizard.c:    page_string(ch->desc, buf, TRUE);
act.wizard.c:    page_string(ch->desc, buf, TRUE);
act.wizard.c:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
act.wizard.c:       save_char(och, och->in_room);
act.wizard.c:  if (ch->desc == NULL) {
act.wizard.c:    case 0: ch->desc->str = &credits; break;
act.wizard.c:    case 1: ch->desc->str = &news; break;
act.wizard.c:    case 2: ch->desc->str = &motd; break;
act.wizard.c:    case 3: ch->desc->str = &imotd; break;
act.wizard.c:    case 4: ch->desc->str = &help; break;
act.wizard.c:    case 5: ch->desc->str = &info; break;
act.wizard.c:    case 6: ch->desc->str = &background; break;
act.wizard.c:    case 7: ch->desc->str = &handbook; break;
act.wizard.c:    case 8: ch->desc->str = &policies; break;
act.wizard.c:    case 9: ch->desc->str = &startup; break;
act.wizard.c:  ch->desc->backstr = NULL;
act.wizard.c:    ch->desc->backstr = str_dup(fields[l].buffer);
act.wizard.c:  ch->desc->max_str = fields[l].size;
act.wizard.c:  ch->desc->mail_to = 0;
act.wizard.c:  CREATE(ch->desc->olc, struct olc_data, 1);
act.wizard.c:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
act.wizard.c:  STATE(ch->desc) = CON_TEXTED;
act.wizard.c:  for (tch = character_list; tch; tch = tch->next)
act.wizard.c:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c:   page_string(ch->desc, buf2, 1);
act.wizard.c~:  original_loc = ch->in_room;
act.wizard.c~:  if (ch->in_room == location) {
act.wizard.c~:      char_to_room(victim, ch->in_room);
act.wizard.c~:	char_to_room(victim, ch->in_room);
act.wizard.c~:  struct room_data *rm = &world[ch->in_room];
act.wizard.c~:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
act.wizard.c~:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
act.wizard.c~:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
act.wizard.c~:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
act.wizard.c~:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c~:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c~:  if (!ch->desc->snooping)
act.wizard.c~:    ch->desc->snooping->snoop_by = NULL;
act.wizard.c~:    ch->desc->snooping = NULL;
act.wizard.c~:  if (!ch->desc)
act.wizard.c~:  else if (victim->desc->snooping == ch->desc)
act.wizard.c~:    if (ch->desc->snooping)
act.wizard.c~:      ch->desc->snooping->snoop_by = NULL;
act.wizard.c~:    ch->desc->snooping = victim->desc;
act.wizard.c~:    victim->desc->snoop_by = ch->desc;
act.wizard.c~:  if (ch->desc->original)
act.wizard.c~:    ch->desc->character = victim;
act.wizard.c~:    ch->desc->original = ch;
act.wizard.c~:    victim->desc = ch->desc;
act.wizard.c~:    ch->desc = NULL;
act.wizard.c~:  if (ch->desc && ch->desc->original) {
act.wizard.c~:    if (ch->desc->original->desc)
act.wizard.c~:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
act.wizard.c~:    ch->desc->character = ch->desc->original;
act.wizard.c~:    ch->desc->original = NULL;
act.wizard.c~:    ch->desc->character->desc = ch->desc;
act.wizard.c~:    ch->desc = NULL;
act.wizard.c~:    char_to_room(mob, ch->in_room);
act.wizard.c~:      obj_to_room(obj, ch->in_room);
act.wizard.c~:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
act.wizard.c~:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
act.wizard.c~:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
act.wizard.c~:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
act.wizard.c~:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
act.wizard.c~:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
act.wizard.c~:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
act.wizard.c~:    i = world[ch->in_room].zone;
act.wizard.c~:      print_zone_to_buf(buf, world[ch->in_room].zone);
act.wizard.c~:    page_string(ch->desc, buf, TRUE);
act.wizard.c~:    page_string(ch->desc, buf, TRUE);
act.wizard.c~:    page_string(ch->desc, buf, TRUE);
act.wizard.c~:    page_string(ch->desc, buf, TRUE);
act.wizard.c~:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
act.wizard.c~:  if (ch->desc == NULL) {
act.wizard.c~:    case 0: ch->desc->str = &credits; break;
act.wizard.c~:    case 1: ch->desc->str = &news; break;
act.wizard.c~:    case 2: ch->desc->str = &motd; break;
act.wizard.c~:    case 3: ch->desc->str = &imotd; break;
act.wizard.c~:    case 4: ch->desc->str = &help; break;
act.wizard.c~:    case 5: ch->desc->str = &info; break;
act.wizard.c~:    case 6: ch->desc->str = &background; break;
act.wizard.c~:    case 7: ch->desc->str = &handbook; break;
act.wizard.c~:    case 8: ch->desc->str = &policies; break;
act.wizard.c~:    case 9: ch->desc->str = &startup; break;
act.wizard.c~:  ch->desc->backstr = NULL;
act.wizard.c~:    ch->desc->backstr = str_dup(fields[l].buffer);
act.wizard.c~:  ch->desc->max_str = fields[l].size;
act.wizard.c~:  ch->desc->mail_to = 0;
act.wizard.c~:  CREATE(ch->desc->olc, struct olc_data, 1);
act.wizard.c~:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
act.wizard.c~:  STATE(ch->desc) = CON_TEXTED;
act.wizard.c.org:  original_loc = ch->in_room;
act.wizard.c.org:  if (ch->in_room == location) {
act.wizard.c.org:      char_to_room(victim, ch->in_room);
act.wizard.c.org:        char_to_room(victim, ch->in_room);
act.wizard.c.org:  struct room_data *rm = &world[ch->in_room];
act.wizard.c.org:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
act.wizard.c.org:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
act.wizard.c.org:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
act.wizard.c.org:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
act.wizard.c.org:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c.org:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c.org:  if (!ch->desc->snooping)
act.wizard.c.org:    ch->desc->snooping->snoop_by = NULL;
act.wizard.c.org:    ch->desc->snooping = NULL;
act.wizard.c.org:  if (!ch->desc)
act.wizard.c.org:  else if (victim->desc->snooping == ch->desc)
act.wizard.c.org:    if (ch->desc->snooping)
act.wizard.c.org:      ch->desc->snooping->snoop_by = NULL;
act.wizard.c.org:    ch->desc->snooping = victim->desc;
act.wizard.c.org:    victim->desc->snoop_by = ch->desc;
act.wizard.c.org:  if (ch->desc->original)
act.wizard.c.org:    ch->desc->character = victim;
act.wizard.c.org:    ch->desc->original = ch;
act.wizard.c.org:    victim->desc = ch->desc;
act.wizard.c.org:    ch->desc = NULL;
act.wizard.c.org:  if (ch->desc && ch->desc->original) {
act.wizard.c.org:    if (ch->desc->original->desc)
act.wizard.c.org:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
act.wizard.c.org:    ch->desc->character = ch->desc->original;
act.wizard.c.org:    ch->desc->original = NULL;
act.wizard.c.org:    ch->desc->character->desc = ch->desc;
act.wizard.c.org:    ch->desc = NULL;
act.wizard.c.org:    char_to_room(mob, ch->in_room);
act.wizard.c.org:      obj_to_room(obj, ch->in_room);
act.wizard.c.org:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
act.wizard.c.org:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
act.wizard.c.org:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
act.wizard.c.org:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
act.wizard.c.org:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
act.wizard.c.org:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
act.wizard.c.org:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
act.wizard.c.org:    i = world[ch->in_room].zone;
act.wizard.c.org:      print_zone_to_buf(buf, world[ch->in_room].zone);
act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
act.wizard.c.org:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
act.wizard.c.org:       save_char(och, och->in_room);
act.wizard.c.org:  if (ch->desc == NULL) {
act.wizard.c.org:    case 0: ch->desc->str = &credits; break;
act.wizard.c.org:    case 1: ch->desc->str = &news; break;
act.wizard.c.org:    case 2: ch->desc->str = &motd; break;
act.wizard.c.org:    case 3: ch->desc->str = &imotd; break;
act.wizard.c.org:    case 4: ch->desc->str = &help; break;
act.wizard.c.org:    case 5: ch->desc->str = &info; break;
act.wizard.c.org:    case 6: ch->desc->str = &background; break;
act.wizard.c.org:    case 7: ch->desc->str = &handbook; break;
act.wizard.c.org:    case 8: ch->desc->str = &policies; break;
act.wizard.c.org:    case 9: ch->desc->str = &startup; break;
act.wizard.c.org:  ch->desc->backstr = NULL;
act.wizard.c.org:    ch->desc->backstr = str_dup(fields[l].buffer);
act.wizard.c.org:  ch->desc->max_str = fields[l].size;
act.wizard.c.org:  ch->desc->mail_to = 0;
act.wizard.c.org:  CREATE(ch->desc->olc, struct olc_data, 1);
act.wizard.c.org:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
act.wizard.c.org:  STATE(ch->desc) = CON_TEXTED;
act.wizard.c.org:  for (tch = character_list; tch; tch = tch->next)
act.wizard.c.org:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c.org:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c.orig:  original_loc = ch->in_room;
act.wizard.c.orig:  if (ch->in_room == location) {
act.wizard.c.orig:      char_to_room(victim, ch->in_room);
act.wizard.c.orig:	char_to_room(victim, ch->in_room);
act.wizard.c.orig:  struct room_data *rm = &world[ch->in_room];
act.wizard.c.orig:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
act.wizard.c.orig:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
act.wizard.c.orig:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
act.wizard.c.orig:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
act.wizard.c.orig:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c.orig:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c.orig:  if (!ch->desc->snooping)
act.wizard.c.orig:    ch->desc->snooping->snoop_by = NULL;
act.wizard.c.orig:    ch->desc->snooping = NULL;
act.wizard.c.orig:  if (!ch->desc)
act.wizard.c.orig:  else if (victim->desc->snooping == ch->desc)
act.wizard.c.orig:    if (ch->desc->snooping)
act.wizard.c.orig:      ch->desc->snooping->snoop_by = NULL;
act.wizard.c.orig:    ch->desc->snooping = victim->desc;
act.wizard.c.orig:    victim->desc->snoop_by = ch->desc;
act.wizard.c.orig:  if (ch->desc->original)
act.wizard.c.orig:    ch->desc->character = victim;
act.wizard.c.orig:    ch->desc->original = ch;
act.wizard.c.orig:    victim->desc = ch->desc;
act.wizard.c.orig:    ch->desc = NULL;
act.wizard.c.orig:  if (ch->desc && ch->desc->original) {
act.wizard.c.orig:    if (ch->desc->original->desc)
act.wizard.c.orig:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
act.wizard.c.orig:    ch->desc->character = ch->desc->original;
act.wizard.c.orig:    ch->desc->original = NULL;
act.wizard.c.orig:    ch->desc->character->desc = ch->desc;
act.wizard.c.orig:    ch->desc = NULL;
act.wizard.c.orig:    char_to_room(mob, ch->in_room);
act.wizard.c.orig:      obj_to_room(obj, ch->in_room);
act.wizard.c.orig:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
act.wizard.c.orig:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
act.wizard.c.orig:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
act.wizard.c.orig:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
act.wizard.c.orig:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
act.wizard.c.orig:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
act.wizard.c.orig:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
act.wizard.c.orig:    i = world[ch->in_room].zone;
act.wizard.c.orig:      print_zone_to_buf(buf, world[ch->in_room].zone);
act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
act.wizard.c.orig:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
act.wizard.c.orig:  if (ch->desc == NULL) {
act.wizard.c.orig:    case 0: ch->desc->str = &credits; break;
act.wizard.c.orig:    case 1: ch->desc->str = &news; break;
act.wizard.c.orig:    case 2: ch->desc->str = &motd; break;
act.wizard.c.orig:    case 3: ch->desc->str = &imotd; break;
act.wizard.c.orig:    case 4: ch->desc->str = &help; break;
act.wizard.c.orig:    case 5: ch->desc->str = &info; break;
act.wizard.c.orig:    case 6: ch->desc->str = &background; break;
act.wizard.c.orig:    case 7: ch->desc->str = &handbook; break;
act.wizard.c.orig:    case 8: ch->desc->str = &policies; break;
act.wizard.c.orig:    case 9: ch->desc->str = &startup; break;
act.wizard.c.orig:  ch->desc->backstr = NULL;
act.wizard.c.orig:    ch->desc->backstr = str_dup(fields[l].buffer);
act.wizard.c.orig:  ch->desc->max_str = fields[l].size;
act.wizard.c.orig:  ch->desc->mail_to = 0;
act.wizard.c.orig:  CREATE(ch->desc->olc, struct olc_data, 1);
act.wizard.c.orig:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
act.wizard.c.orig:  STATE(ch->desc) = CON_TEXTED;
act.wizard.c.save:  original_loc = ch->in_room;
act.wizard.c.save:  if (ch->in_room == location) {
act.wizard.c.save:      char_to_room(victim, ch->in_room);
act.wizard.c.save:        char_to_room(victim, ch->in_room);
act.wizard.c.save:  struct room_data *rm = &world[ch->in_room];
act.wizard.c.save:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
act.wizard.c.save:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
act.wizard.c.save:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
act.wizard.c.save:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
act.wizard.c.save:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c.save:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c.save:  if (!ch->desc->snooping)
act.wizard.c.save:    ch->desc->snooping->snoop_by = NULL;
act.wizard.c.save:    ch->desc->snooping = NULL;
act.wizard.c.save:  if (!ch->desc)
act.wizard.c.save:  else if (victim->desc->snooping == ch->desc)
act.wizard.c.save:    if (ch->desc->snooping)
act.wizard.c.save:      ch->desc->snooping->snoop_by = NULL;
act.wizard.c.save:    ch->desc->snooping = victim->desc;
act.wizard.c.save:    victim->desc->snoop_by = ch->desc;
act.wizard.c.save:  if (ch->desc->original)
act.wizard.c.save:    ch->desc->character = victim;
act.wizard.c.save:    ch->desc->original = ch;
act.wizard.c.save:    victim->desc = ch->desc;
act.wizard.c.save:    ch->desc = NULL;
act.wizard.c.save:  if (ch->desc && ch->desc->original) {
act.wizard.c.save:    if (ch->desc->original->desc)
act.wizard.c.save:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
act.wizard.c.save:    ch->desc->character = ch->desc->original;
act.wizard.c.save:    ch->desc->original = NULL;
act.wizard.c.save:    ch->desc->character->desc = ch->desc;
act.wizard.c.save:    ch->desc = NULL;
act.wizard.c.save:    char_to_room(mob, ch->in_room);
act.wizard.c.save:      obj_to_room(obj, ch->in_room);
act.wizard.c.save:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
act.wizard.c.save:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
act.wizard.c.save:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
act.wizard.c.save:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
act.wizard.c.save:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
act.wizard.c.save:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
act.wizard.c.save:if (!str_cmp(ch->player.name, "Tuskino"))
act.wizard.c.save:else if (!str_cmp(ch->player.name, "Misato"))
act.wizard.c.save:else if (!str_cmp(ch->player.name, "Griff"))
act.wizard.c.save:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
act.wizard.c.save:    i = world[ch->in_room].zone;
act.wizard.c.save:      print_zone_to_buf(buf, world[ch->in_room].zone);
act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
act.wizard.c.save:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
act.wizard.c.save:       save_char(och, och->in_room);
act.wizard.c.save:  if (ch->desc == NULL) {
act.wizard.c.save:    case 0: ch->desc->str = &credits; break;
act.wizard.c.save:    case 1: ch->desc->str = &news; break;
act.wizard.c.save:    case 2: ch->desc->str = &motd; break;
act.wizard.c.save:    case 3: ch->desc->str = &imotd; break;
act.wizard.c.save:    case 4: ch->desc->str = &help; break;
act.wizard.c.save:    case 5: ch->desc->str = &info; break;
act.wizard.c.save:    case 6: ch->desc->str = &background; break;
act.wizard.c.save:    case 7: ch->desc->str = &handbook; break;
act.wizard.c.save:    case 8: ch->desc->str = &policies; break;
act.wizard.c.save:    case 9: ch->desc->str = &startup; break;
act.wizard.c.save:  ch->desc->backstr = NULL;
act.wizard.c.save:    ch->desc->backstr = str_dup(fields[l].buffer);
act.wizard.c.save:  ch->desc->max_str = fields[l].size;
act.wizard.c.save:  ch->desc->mail_to = 0;
act.wizard.c.save:  CREATE(ch->desc->olc, struct olc_data, 1);
act.wizard.c.save:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
act.wizard.c.save:  STATE(ch->desc) = CON_TEXTED;
act.wizard.c.save:  for (tch = character_list; tch; tch = tch->next)
act.wizard.c.save:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.c.save:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.c.save:   page_string(ch->desc, buf2, 1);
act.wizard.c.save:page_string(ch->desc, buf2, 1);
act.wizard.ct:  original_loc = ch->in_room;
act.wizard.ct:  if (ch->in_room == location) {
act.wizard.ct:      char_to_room(victim, ch->in_room);
act.wizard.ct:        char_to_room(victim, ch->in_room);
act.wizard.ct:  struct room_data *rm = &world[ch->in_room];
act.wizard.ct:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
act.wizard.ct:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
act.wizard.ct:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
act.wizard.ct:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
act.wizard.ct:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
act.wizard.ct:        for(vict=world[ch->in_room].people;vict;vict=next_v)
act.wizard.ct:  if (!ch->desc->snooping)
act.wizard.ct:    ch->desc->snooping->snoop_by = NULL;
act.wizard.ct:    ch->desc->snooping = NULL;
act.wizard.ct:  if (!ch->desc)
act.wizard.ct:  else if (victim->desc->snooping == ch->desc)
act.wizard.ct:    if (ch->desc->snooping)
act.wizard.ct:      ch->desc->snooping->snoop_by = NULL;
act.wizard.ct:    ch->desc->snooping = victim->desc;
act.wizard.ct:    victim->desc->snoop_by = ch->desc;
act.wizard.ct:  if (ch->desc->original)
act.wizard.ct:    ch->desc->character = victim;
act.wizard.ct:    ch->desc->original = ch;
act.wizard.ct:    victim->desc = ch->desc;
act.wizard.ct:    ch->desc = NULL;
act.wizard.ct:  if (ch->desc && ch->desc->original) {
act.wizard.ct:    if (ch->desc->original->desc)
act.wizard.ct:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
act.wizard.ct:    ch->desc->character = ch->desc->original;
act.wizard.ct:    ch->desc->original = NULL;
act.wizard.ct:    ch->desc->character->desc = ch->desc;
act.wizard.ct:    ch->desc = NULL;
act.wizard.ct:    char_to_room(mob, ch->in_room);
act.wizard.ct:      obj_to_room(obj, ch->in_room);
act.wizard.ct:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
act.wizard.ct:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
act.wizard.ct:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
act.wizard.ct:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
act.wizard.ct:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
act.wizard.ct:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
act.wizard.ct:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
act.wizard.ct:    i = world[ch->in_room].zone;
act.wizard.ct:      print_zone_to_buf(buf, world[ch->in_room].zone);
act.wizard.ct:    page_string(ch->desc, buf, TRUE);
act.wizard.ct:    page_string(ch->desc, buf, TRUE);
act.wizard.ct:    page_string(ch->desc, buf, TRUE);
act.wizard.ct:    page_string(ch->desc, buf, TRUE);
act.wizard.ct:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
act.wizard.ct:       save_char(och, och->in_room);
act.wizard.ct:  if (ch->desc == NULL) {
act.wizard.ct:    case 0: ch->desc->str = &credits; break;
act.wizard.ct:    case 1: ch->desc->str = &news; break;
act.wizard.ct:    case 2: ch->desc->str = &motd; break;
act.wizard.ct:    case 3: ch->desc->str = &imotd; break;
act.wizard.ct:    case 4: ch->desc->str = &help; break;
act.wizard.ct:    case 5: ch->desc->str = &info; break;
act.wizard.ct:    case 6: ch->desc->str = &background; break;
act.wizard.ct:    case 7: ch->desc->str = &handbook; break;
act.wizard.ct:    case 8: ch->desc->str = &policies; break;
act.wizard.ct:    case 9: ch->desc->str = &startup; break;
act.wizard.ct:  ch->desc->backstr = NULL;
act.wizard.ct:    ch->desc->backstr = str_dup(fields[l].buffer);
act.wizard.ct:  ch->desc->max_str = fields[l].size;
act.wizard.ct:  ch->desc->mail_to = 0;
act.wizard.ct:  CREATE(ch->desc->olc, struct olc_data, 1);
act.wizard.ct:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
act.wizard.ct:  STATE(ch->desc) = CON_TEXTED;
act.wizard.ct:  for (tch = character_list; tch; tch = tch->next)
auction.c:  if (ch->master && AFF_FLAGGED(ch, AFF_MAJIN))
auction.c:  if (ch->master && AFF_FLAGGED(ch, AFF_MAJIN))
auction.c:  } else if ((obj = get_obj_in_list_vis(ch, buf1, ch->carrying)) == NULL)
boards.c:  for (obj = world[ch->in_room].contents; obj; obj = obj->next_content)
boards.c:  if (!ch->desc)
boards.c:  ch->desc->str = &(msg_storage[NEW_MSG_INDEX(board_type).slot_num]);
boards.c:  ch->desc->max_str = MAX_MESSAGE_LENGTH;
boards.c:  ch->desc->mail_to = board_type + BOARD_MAGIC;
boards.c:  if (!ch->desc)
boards.c:  page_string(ch->desc, buf, 1);
boards.c:  page_string(ch->desc, buffer, 1);
castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
castle.c:      if (!strncmp(pszName, ch->player.short_descr, iLen))
castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
castle.c:  if (cmd != ++iProhibited_direction || (ch->player.short_descr &&
castle.c:		       !strncmp(ch->player.short_descr, "King Welmar", 11)))
castle.c:  if ((ch->in_room == real_room(iIn_room)) && (cmd == iProhibited_direction)) {
castle.c:  if (ch->points.mana < 10)
castle.c:  ch->points.mana -= 10;
castle.c:    if (time_info.hours == 8 && ch->in_room == R_ROOM(Z_KINGS_C, 51)) {
castle.c:    } else if (time_info.hours == 21 && ch->in_room == R_ROOM(Z_KINGS_C, 17)) {
castle.c:    } else if (time_info.hours == 12 && ch->in_room == R_ROOM(Z_KINGS_C, 17)) {
castle.c:    if (!ch->master)
castle.c:    if (!ch->master)
castle.c:  for (i = world[ch->in_room].contents; i; i = i->next_content)
castle.c:  for (i = world[ch->in_room].contents; i; i = next) {
class.c:  ch->real_abils.str_add = 0;
class.c:    ch->real_abils.intel = table[0];
class.c:    ch->real_abils.str = table[1];
class.c:    ch->real_abils.dex = table[2];
class.c:    ch->real_abils.con = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.con = table[0];
class.c:    ch->real_abils.str = table[1];
class.c:    ch->real_abils.dex = table[2];
class.c:    ch->real_abils.wis = table[3];
class.c:    ch->real_abils.intel = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.con = table[1];
class.c:    ch->real_abils.dex = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.intel = table[3];
class.c:    ch->real_abils.wis = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    ch->real_abils.str = table[0];
class.c:    ch->real_abils.dex = table[1];
class.c:    ch->real_abils.con = table[2];
class.c:    ch->real_abils.wis = table[3];
class.c:    ch->real_abils.intel = table[4];
class.c:    ch->real_abils.cha = table[5];
class.c:    if (ch->real_abils.str == 100)
class.c:      ch->real_abils.str_add = number(0, 200);
class.c:  ch->real_abils.rage = 1;
class.c:  ch->real_abils.ubs = ch->real_abils.lbs = 50;
class.c:  ch->aff_abils = ch->real_abils;
class.c:  ch->points.max_hit = 10;
class.c:  ch->player.time.played = 0;
class.c:  ch->player.time.logon = time(0);
class.c:  ch->player_specials->saved.pc_attacks = 1;
class.c:  ch->points.max_hit += MAX(1, add_hp);
class.c:  ch->points.max_move += MAX(1, add_move);
class.c:  ch->points.max_mana += MAX(1, add_mana);
class.c:  ch->points.damroll += MAX(1, add_damroll);
class.c:  ch->points.hitroll += MAX(1, add_hitroll);
class.c~:  ch->real_abils.str_add = 0;
class.c~:    ch->real_abils.intel = table[0];
class.c~:    ch->real_abils.str = table[1];
class.c~:    ch->real_abils.dex = table[2];
class.c~:    ch->real_abils.con = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.con = table[0];
class.c~:    ch->real_abils.str = table[1];
class.c~:    ch->real_abils.dex = table[2];
class.c~:    ch->real_abils.wis = table[3];
class.c~:    ch->real_abils.intel = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.con = table[1];
class.c~:    ch->real_abils.dex = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.intel = table[3];
class.c~:    ch->real_abils.wis = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    ch->real_abils.str = table[0];
class.c~:    ch->real_abils.dex = table[1];
class.c~:    ch->real_abils.con = table[2];
class.c~:    ch->real_abils.wis = table[3];
class.c~:    ch->real_abils.intel = table[4];
class.c~:    ch->real_abils.cha = table[5];
class.c~:    if (ch->real_abils.str == 100)
class.c~:      ch->real_abils.str_add = number(0, 200);
class.c~:  ch->aff_abils = ch->real_abils;
class.c~:  ch->points.max_hit = 10;
class.c~:  ch->player.time.played = 0;
class.c~:  ch->player.time.logon = time(0);
class.c~:  ch->player_specials->saved.pc_attacks = 1;
class.c~:  ch->points.max_hit += MAX(1, add_hp);
class.c~:  ch->points.max_move += MAX(1, add_move);
class.c~:    ch->points.max_mana += add_mana;
class.c.save:  ch->real_abils.str_add = 0;
class.c.save:    ch->real_abils.intel = table[0];
class.c.save:    ch->real_abils.str = table[1];
class.c.save:    ch->real_abils.dex = table[2];
class.c.save:    ch->real_abils.con = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.con = table[0];
class.c.save:    ch->real_abils.str = table[1];
class.c.save:    ch->real_abils.dex = table[2];
class.c.save:    ch->real_abils.wis = table[3];
class.c.save:    ch->real_abils.intel = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.con = table[1];
class.c.save:    ch->real_abils.dex = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.intel = table[3];
class.c.save:    ch->real_abils.wis = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    ch->real_abils.str = table[0];
class.c.save:    ch->real_abils.dex = table[1];
class.c.save:    ch->real_abils.con = table[2];
class.c.save:    ch->real_abils.wis = table[3];
class.c.save:    ch->real_abils.intel = table[4];
class.c.save:    ch->real_abils.cha = table[5];
class.c.save:    if (ch->real_abils.str == 100)
class.c.save:      ch->real_abils.str_add = number(0, 200);
class.c.save:  ch->real_abils.rage = 1;
class.c.save:  ch->real_abils.ubs = ch->real_abils.lbs = 50;
class.c.save:  ch->aff_abils = ch->real_abils;
class.c.save:  ch->points.max_hit = 10;
class.c.save:  ch->player.time.played = 0;
class.c.save:  ch->player.time.logon = time(0);
class.c.save:  ch->player_specials->saved.pc_attacks = 1;
class.c.save:  ch->points.max_hit += MAX(1, add_hp);
class.c.save:  ch->points.max_move += MAX(1, add_move);
class.c.save:    ch->points.max_mana += add_mana;
comm.c:  if (ch->desc && messg)
comm.c:    SEND_TO_Q(messg, ch->desc);
comm.c:  if (ch && ch->in_room != NOWHERE)
comm.c:    to = world[ch->in_room].people;
comm.c.org:  if (ch->desc && messg)
comm.c.org:    SEND_TO_Q(messg, ch->desc);
comm.c.org:  if (ch && ch->in_room != NOWHERE)
comm.c.org:    to = world[ch->in_room].people;
comm.c.orig:  if (ch->desc && messg)
comm.c.orig:    SEND_TO_Q(messg, ch->desc);
comm.c.orig:  if (ch && ch->in_room != NOWHERE)
comm.c.orig:    to = world[ch->in_room].people;
db.c:  ch->next = character_list;
db.c:  if (IS_NPC(ch) || !ch->desc || GET_PFILEPOS(ch) < 0)
db.c:  strncpy(st.host, ch->desc->host, HOST_LENGTH);
db.c:  if (ch->player_specials == NULL)
db.c:    CREATE(ch->player_specials, struct player_special_data, 1);
db.c:  ch->player.short_descr = NULL;
db.c:  ch->player.long_descr = NULL;
db.c:  ch->player.title = str_dup(st->title);
db.c:  ch->player.description = str_dup(st->description);
db.c:  ch->player.hometown = st->hometown;
db.c:  ch->player.time.birth = st->birth;
db.c:  ch->player.time.played = st->played;
db.c:  ch->player.time.logon = time(0);
db.c:  ch->player.weight = st->weight;
db.c:  ch->player.height = st->height;
db.c:  ch->real_abils = st->abilities;
db.c:  ch->aff_abils = st->abilities;
db.c:  ch->points = st->points;
db.c:  ch->char_specials.saved = st->char_specials_saved;
db.c:  ch->player_specials->saved = st->player_specials_saved;
db.c:  if (ch->points.max_mana < 100)
db.c:    ch->points.max_mana = 100;
db.c:  ch->char_specials.carry_weight = 0;
db.c:  ch->char_specials.carry_items = 0;
db.c:  ch->points.armor = 100;
db.c:  ch->points.hitroll = 15;
db.c:  ch->points.damroll = 15;
db.c:  if (ch->player.name == NULL)
db.c:    CREATE(ch->player.name, char, strlen(st->name) + 1);
db.c:  strcpy(ch->player.name, st->name);
db.c:  strcpy(ch->player.passwd, st->pwd);
db.c:  for (af = ch->affected, i = 0; i < MAX_AFFECT; i++) {
db.c:  while (ch->affected)
db.c:    affect_remove(ch, ch->affected);
db.c:  ch->aff_abils = ch->real_abils;
db.c:  st->birth = ch->player.time.birth;
db.c:  st->played = ch->player.time.played;
db.c:  st->played += (long) (time(0) - ch->player.time.logon);
db.c:  ch->player.time.played = st->played;
db.c:  ch->player.time.logon = time(0);
db.c:  st->hometown = ch->player.hometown;
db.c:  st->abilities = ch->real_abils;
db.c:  st->points = ch->points;
db.c:  st->char_specials_saved = ch->char_specials.saved;
db.c:  st->player_specials_saved = ch->player_specials->saved;
db.c:  if (ch->player.description)
db.c:    strcpy(st->description, ch->player.description);
db.c:  if (ch->player_specials != NULL && ch->player_specials != &dummy_mob) {
db.c:    if (ch->player_specials->poofin)
db.c:      free(ch->player_specials->poofin);
db.c:    if (ch->player_specials->poofout)
db.c:      free(ch->player_specials->poofout);
db.c:    free(ch->player_specials);
db.c:    if (ch->player.title)
db.c:      free(ch->player.title);
db.c:    if (ch->player.short_descr)
db.c:      free(ch->player.short_descr);
db.c:    if (ch->player.long_descr)
db.c:      free(ch->player.long_descr);
db.c:    if (ch->player.description)
db.c:      free(ch->player.description);
db.c:    if (ch->player.name && ch->player.name != mob_proto[i].player.name)
db.c:      free(ch->player.name);
db.c:    if (ch->player.title && ch->player.title != mob_proto[i].player.title)
db.c:      free(ch->player.title);
db.c:    if (ch->player.short_descr && ch->player.short_descr != mob_proto[i].player.short_descr)
db.c:      free(ch->player.short_descr);
db.c:    if (ch->player.long_descr && ch->player.long_descr != mob_proto[i].player.long_descr)
db.c:      free(ch->player.long_descr);
db.c:    if (ch->player.description && ch->player.description != mob_proto[i].player.description)
db.c:      free(ch->player.description);
db.c:  while (ch->affected)
db.c:    affect_remove(ch, ch->affected);
db.c:  if (ch->desc)
db.c:    ch->desc->character = NULL;
db.c:  ch->followers = NULL;
db.c:  ch->master = NULL;
db.c:  ch->in_room = NOWHERE;
db.c:  ch->carrying = NULL;
db.c:  ch->next = NULL;
db.c:  ch->next_fighting = NULL;
db.c:  ch->next_in_room = NULL;
db.c:  ch->char_specials.position = POS_STANDING;
db.c:  ch->mob_specials.default_pos = POS_STANDING;
db.c:  ch->char_specials.carry_weight = 0;
db.c:  ch->char_specials.carry_items = 0;
db.c:  ch->in_room = NOWHERE;
db.c:  ch->mob_specials.default_pos = POS_STANDING;
db.c:  if (ch->points.max_mana < 100)
db.c:    ch->points.max_mana = 100;
db.c:  if (ch->player_specials == NULL)
db.c:    CREATE(ch->player_specials, struct player_special_data, 1);
db.c:    ch->points.max_hit = 30000;
db.c:    ch->points.max_mana = 30000;
db.c:    ch->points.max_move = 30000;
db.c:  ch->player.short_descr = NULL;
db.c:  ch->player.long_descr = NULL;
db.c:  ch->player.description = NULL;
db.c:  ch->player.hometown = 1;
db.c:  ch->player.time.birth = time(0);
db.c:  ch->player.time.played = 0;
db.c:  ch->player.time.logon = time(0);
db.c:  if (ch->player.sex == SEX_MALE) {
db.c:    ch->player.weight = number(120, 180);
db.c:    ch->player.height = number(160, 200);
db.c:    ch->player.weight = number(100, 160);
db.c:    ch->player.height = number(150, 180);
db.c:  ch->points.max_mana = 100;
db.c:  ch->points.mana = GET_MAX_MANA(ch);
db.c:  ch->points.hit = GET_MAX_HIT(ch);
db.c:  ch->points.max_move = 82;
db.c:  ch->points.move = GET_MAX_MOVE(ch);
db.c:  ch->points.armor = 100;
db.c:  ch->char_specials.saved.affected_by = 0;
db.c:  ch->real_abils.intel = 25;
db.c:  ch->real_abils.wis = 25;
db.c:  ch->real_abils.dex = 100;
db.c:  ch->real_abils.str = 25;
db.c:  ch->real_abils.str_add = 100;
db.c:  ch->real_abils.con = 25;
db.c:  ch->real_abils.cha = 25;
db.c:  ch->real_abils.rage = 100;
db.c:  ch->real_abils.ubs = 100;
db.c:  ch->real_abils.lbs = 100;
db.c~:  ch->next = character_list;
db.c~:  if (IS_NPC(ch) || !ch->desc || GET_PFILEPOS(ch) < 0)
db.c~:  strncpy(st.host, ch->desc->host, HOST_LENGTH);
db.c~:  if (ch->player_specials == NULL)
db.c~:    CREATE(ch->player_specials, struct player_special_data, 1);
db.c~:  ch->player.short_descr = NULL;
db.c~:  ch->player.long_descr = NULL;
db.c~:  ch->player.title = str_dup(st->title);
db.c~:  ch->player.description = str_dup(st->description);
db.c~:  ch->player.hometown = st->hometown;
db.c~:  ch->player.time.birth = st->birth;
db.c~:  ch->player.time.played = st->played;
db.c~:  ch->player.time.logon = time(0);
db.c~:  ch->player.weight = st->weight;
db.c~:  ch->player.height = st->height;
db.c~:  ch->real_abils = st->abilities;
db.c~:  ch->aff_abils = st->abilities;
db.c~:  ch->points = st->points;
db.c~:  ch->char_specials.saved = st->char_specials_saved;
db.c~:  ch->player_specials->saved = st->player_specials_saved;
db.c~:  if (ch->points.max_mana < 100)
db.c~:    ch->points.max_mana = 100;
db.c~:  ch->char_specials.carry_weight = 0;
db.c~:  ch->char_specials.carry_items = 0;
db.c~:  ch->points.armor = 100;
db.c~:  ch->points.hitroll = 1;
db.c~:  ch->points.damroll = 1;
db.c~:  if (ch->player.name == NULL)
db.c~:    CREATE(ch->player.name, char, strlen(st->name) + 1);
db.c~:  strcpy(ch->player.name, st->name);
db.c~:  strcpy(ch->player.passwd, st->pwd);
db.c~:  for (af = ch->affected, i = 0; i < MAX_AFFECT; i++) {
db.c~:  while (ch->affected)
db.c~:    affect_remove(ch, ch->affected);
db.c~:  ch->aff_abils = ch->real_abils;
db.c~:  st->birth = ch->player.time.birth;
db.c~:  st->played = ch->player.time.played;
db.c~:  st->played += (long) (time(0) - ch->player.time.logon);
db.c~:  ch->player.time.played = st->played;
db.c~:  ch->player.time.logon = time(0);
db.c~:  st->hometown = ch->player.hometown;
db.c~:  st->abilities = ch->real_abils;
db.c~:  st->points = ch->points;
db.c~:  st->char_specials_saved = ch->char_specials.saved;
db.c~:  st->player_specials_saved = ch->player_specials->saved;
db.c~:  if (ch->player.description)
db.c~:    strcpy(st->description, ch->player.description);
db.c~:  if (ch->player_specials != NULL && ch->player_specials != &dummy_mob) {
db.c~:    if (ch->player_specials->poofin)
db.c~:      free(ch->player_specials->poofin);
db.c~:    if (ch->player_specials->poofout)
db.c~:      free(ch->player_specials->poofout);
db.c~:    free(ch->player_specials);
db.c~:    if (ch->player.title)
db.c~:      free(ch->player.title);
db.c~:    if (ch->player.short_descr)
db.c~:      free(ch->player.short_descr);
db.c~:    if (ch->player.long_descr)
db.c~:      free(ch->player.long_descr);
db.c~:    if (ch->player.description)
db.c~:      free(ch->player.description);
db.c~:    if (ch->player.name && ch->player.name != mob_proto[i].player.name)
db.c~:      free(ch->player.name);
db.c~:    if (ch->player.title && ch->player.title != mob_proto[i].player.title)
db.c~:      free(ch->player.title);
db.c~:    if (ch->player.short_descr && ch->player.short_descr != mob_proto[i].player.short_descr)
db.c~:      free(ch->player.short_descr);
db.c~:    if (ch->player.long_descr && ch->player.long_descr != mob_proto[i].player.long_descr)
db.c~:      free(ch->player.long_descr);
db.c~:    if (ch->player.description && ch->player.description != mob_proto[i].player.description)
db.c~:      free(ch->player.description);
db.c~:  while (ch->affected)
db.c~:    affect_remove(ch, ch->affected);
db.c~:  if (ch->desc)
db.c~:    ch->desc->character = NULL;
db.c~:  ch->followers = NULL;
db.c~:  ch->master = NULL;
db.c~:  ch->in_room = NOWHERE;
db.c~:  ch->carrying = NULL;
db.c~:  ch->next = NULL;
db.c~:  ch->next_fighting = NULL;
db.c~:  ch->next_in_room = NULL;
db.c~:  ch->char_specials.position = POS_STANDING;
db.c~:  ch->mob_specials.default_pos = POS_STANDING;
db.c~:  ch->char_specials.carry_weight = 0;
db.c~:  ch->char_specials.carry_items = 0;
db.c~:  ch->in_room = NOWHERE;
db.c~:  ch->mob_specials.default_pos = POS_STANDING;
db.c~:  if (ch->points.max_mana < 100)
db.c~:    ch->points.max_mana = 100;
db.c~:  if (ch->player_specials == NULL)
db.c~:    CREATE(ch->player_specials, struct player_special_data, 1);
db.c~:    ch->points.max_hit = 30000;
db.c~:    ch->points.max_mana = 30000;
db.c~:    ch->points.max_move = 30000;
db.c~:  ch->player.short_descr = NULL;
db.c~:  ch->player.long_descr = NULL;
db.c~:  ch->player.description = NULL;
db.c~:  ch->player.hometown = 1;
db.c~:  ch->player.time.birth = time(0);
db.c~:  ch->player.time.played = 0;
db.c~:  ch->player.time.logon = time(0);
db.c~:  if (ch->player.sex == SEX_MALE) {
db.c~:    ch->player.weight = number(120, 180);
db.c~:    ch->player.height = number(160, 200);
db.c~:    ch->player.weight = number(100, 160);
db.c~:    ch->player.height = number(150, 180);
db.c~:  ch->points.max_mana = 100;
db.c~:  ch->points.mana = GET_MAX_MANA(ch);
db.c~:  ch->points.hit = GET_MAX_HIT(ch);
db.c~:  ch->points.max_move = 82;
db.c~:  ch->points.move = GET_MAX_MOVE(ch);
db.c~:  ch->points.armor = 100;
db.c~:  ch->char_specials.saved.affected_by = 0;
db.c~:  ch->real_abils.intel = 100;
db.c~:  ch->real_abils.wis = 100;
db.c~:  ch->real_abils.dex = 100;
db.c~:  ch->real_abils.str = 100;
db.c~:  ch->real_abils.str_add = 200;
db.c~:  ch->real_abils.con = 100;
db.c~:  ch->real_abils.cha = 100;
db.c~:  ch->real_abils.rage = 101;
db.c~:  ch->real_abils.ubs = 101;
db.c~:  ch->real_abils.lbs = 101;
db.c.orig:  ch->next = character_list;
db.c.orig:  if (IS_NPC(ch) || !ch->desc || GET_PFILEPOS(ch) < 0)
db.c.orig:  strncpy(st.host, ch->desc->host, HOST_LENGTH);
db.c.orig:  if (ch->player_specials == NULL)
db.c.orig:    CREATE(ch->player_specials, struct player_special_data, 1);
db.c.orig:  ch->player.short_descr = NULL;
db.c.orig:  ch->player.long_descr = NULL;
db.c.orig:  ch->player.title = str_dup(st->title);
db.c.orig:  ch->player.description = str_dup(st->description);
db.c.orig:  ch->player.hometown = st->hometown;
db.c.orig:  ch->player.time.birth = st->birth;
db.c.orig:  ch->player.time.played = st->played;
db.c.orig:  ch->player.time.logon = time(0);
db.c.orig:  ch->player.weight = st->weight;
db.c.orig:  ch->player.height = st->height;
db.c.orig:  ch->real_abils = st->abilities;
db.c.orig:  ch->aff_abils = st->abilities;
db.c.orig:  ch->points = st->points;
db.c.orig:  ch->char_specials.saved = st->char_specials_saved;
db.c.orig:  ch->player_specials->saved = st->player_specials_saved;
db.c.orig:  if (ch->points.max_mana < 100)
db.c.orig:    ch->points.max_mana = 100;
db.c.orig:  ch->char_specials.carry_weight = 0;
db.c.orig:  ch->char_specials.carry_items = 0;
db.c.orig:  ch->points.armor = 100;
db.c.orig:  ch->points.hitroll = 1;
db.c.orig:  ch->points.damroll = 1;
db.c.orig:  if (ch->player.name == NULL)
db.c.orig:    CREATE(ch->player.name, char, strlen(st->name) + 1);
db.c.orig:  strcpy(ch->player.name, st->name);
db.c.orig:  strcpy(ch->player.passwd, st->pwd);
db.c.orig:  for (af = ch->affected, i = 0; i < MAX_AFFECT; i++) {
db.c.orig:  while (ch->affected)
db.c.orig:    affect_remove(ch, ch->affected);
db.c.orig:  ch->aff_abils = ch->real_abils;
db.c.orig:  st->birth = ch->player.time.birth;
db.c.orig:  st->played = ch->player.time.played;
db.c.orig:  st->played += (long) (time(0) - ch->player.time.logon);
db.c.orig:  ch->player.time.played = st->played;
db.c.orig:  ch->player.time.logon = time(0);
db.c.orig:  st->hometown = ch->player.hometown;
db.c.orig:  st->abilities = ch->real_abils;
db.c.orig:  st->points = ch->points;
db.c.orig:  st->char_specials_saved = ch->char_specials.saved;
db.c.orig:  st->player_specials_saved = ch->player_specials->saved;
db.c.orig:  if (ch->player.description)
db.c.orig:    strcpy(st->description, ch->player.description);
db.c.orig:  if (ch->player_specials != NULL && ch->player_specials != &dummy_mob) {
db.c.orig:    if (ch->player_specials->poofin)
db.c.orig:      free(ch->player_specials->poofin);
db.c.orig:    if (ch->player_specials->poofout)
db.c.orig:      free(ch->player_specials->poofout);
db.c.orig:    free(ch->player_specials);
db.c.orig:    if (ch->player.title)
db.c.orig:      free(ch->player.title);
db.c.orig:    if (ch->player.short_descr)
db.c.orig:      free(ch->player.short_descr);
db.c.orig:    if (ch->player.long_descr)
db.c.orig:      free(ch->player.long_descr);
db.c.orig:    if (ch->player.description)
db.c.orig:      free(ch->player.description);
db.c.orig:    if (ch->player.name && ch->player.name != mob_proto[i].player.name)
db.c.orig:      free(ch->player.name);
db.c.orig:    if (ch->player.title && ch->player.title != mob_proto[i].player.title)
db.c.orig:      free(ch->player.title);
db.c.orig:    if (ch->player.short_descr && ch->player.short_descr != mob_proto[i].player.short_descr)
db.c.orig:      free(ch->player.short_descr);
db.c.orig:    if (ch->player.long_descr && ch->player.long_descr != mob_proto[i].player.long_descr)
db.c.orig:      free(ch->player.long_descr);
db.c.orig:    if (ch->player.description && ch->player.description != mob_proto[i].player.description)
db.c.orig:      free(ch->player.description);
db.c.orig:  while (ch->affected)
db.c.orig:    affect_remove(ch, ch->affected);
db.c.orig:  if (ch->desc)
db.c.orig:    ch->desc->character = NULL;
db.c.orig:  ch->followers = NULL;
db.c.orig:  ch->master = NULL;
db.c.orig:  ch->in_room = NOWHERE;
db.c.orig:  ch->carrying = NULL;
db.c.orig:  ch->next = NULL;
db.c.orig:  ch->next_fighting = NULL;
db.c.orig:  ch->next_in_room = NULL;
db.c.orig:  ch->char_specials.position = POS_STANDING;
db.c.orig:  ch->mob_specials.default_pos = POS_STANDING;
db.c.orig:  ch->char_specials.carry_weight = 0;
db.c.orig:  ch->char_specials.carry_items = 0;
db.c.orig:  ch->in_room = NOWHERE;
db.c.orig:  ch->mob_specials.default_pos = POS_STANDING;
db.c.orig:  if (ch->points.max_mana < 100)
db.c.orig:    ch->points.max_mana = 100;
db.c.orig:  if (ch->player_specials == NULL)
db.c.orig:    CREATE(ch->player_specials, struct player_special_data, 1);
db.c.orig:    ch->points.max_hit = 30000;
db.c.orig:    ch->points.max_mana = 30000;
db.c.orig:    ch->points.max_move = 30000;
db.c.orig:  ch->player.short_descr = NULL;
db.c.orig:  ch->player.long_descr = NULL;
db.c.orig:  ch->player.description = NULL;
db.c.orig:  ch->player.hometown = 1;
db.c.orig:  ch->player.time.birth = time(0);
db.c.orig:  ch->player.time.played = 0;
db.c.orig:  ch->player.time.logon = time(0);
db.c.orig:  if (ch->player.sex == SEX_MALE) {
db.c.orig:    ch->player.weight = number(120, 180);
db.c.orig:    ch->player.height = number(160, 200);
db.c.orig:    ch->player.weight = number(100, 160);
db.c.orig:    ch->player.height = number(150, 180);
db.c.orig:  ch->points.max_mana = 100;
db.c.orig:  ch->points.mana = GET_MAX_MANA(ch);
db.c.orig:  ch->points.hit = GET_MAX_HIT(ch);
db.c.orig:  ch->points.max_move = 82;
db.c.orig:  ch->points.move = GET_MAX_MOVE(ch);
db.c.orig:  ch->points.armor = 100;
db.c.orig:  ch->char_specials.saved.affected_by = 0;
db.c.orig:  ch->real_abils.intel = 25;
db.c.orig:  ch->real_abils.wis = 25;
db.c.orig:  ch->real_abils.dex = 100;
db.c.orig:  ch->real_abils.str = 25;
db.c.orig:  ch->real_abils.str_add = 100;
db.c.orig:  ch->real_abils.con = 25;
db.c.orig:  ch->real_abils.cha = 25;
db.c.orig:  ch->real_abils.rage = 100;
db.c.orig:  ch->real_abils.ubs = 100;
db.c.orig:  ch->real_abils.lbs = 100;
dg_comm.c:						    ch->equipment, &tmp)) ?
dg_comm.c:		     (obj = get_obj_in_list_vis(ch, name, ch->carrying)));
dg_comm.c:	for (to = world[ch->in_room].people;
dg_mobcmd.c:    if (IS_AFFECTED(ch, AFF_MAJIN) && ch->master == victim ) {
dg_mobcmd.c:	if ((obj=get_object_in_equip_vis(ch,arg,ch->equipment,&pos))!= NULL) {
dg_mobcmd.c:	if ((obj = get_obj_in_list_vis(ch, arg, ch->carrying)) != NULL )
dg_mobcmd.c:	for (obj = ch->carrying; obj != NULL; obj = obj_next) {
dg_mobcmd.c:	while ((obj=get_object_in_equip_vis(ch,arg,ch->equipment,&pos)))
dg_mobcmd.c:    if( ch->desc && GET_LEVEL(ch->desc->original) < LVL_IMPL)
dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
dg_mobcmd.c:    if (ch->desc) {
dg_mobcmd.c:    tmpmob.id = ch->id;
dg_mobcmd.c:    tmpmob.affected = ch->affected;
dg_mobcmd.c:    tmpmob.carrying = ch->carrying;
dg_mobcmd.c:    tmpmob.proto_script = ch->proto_script;
dg_mobcmd.c:    tmpmob.script = ch->script;
dg_mobcmd.c:    tmpmob.memory = ch->memory;
dg_mobcmd.c:    tmpmob.next_in_room = ch->next_in_room;
dg_mobcmd.c:    tmpmob.next = ch->next;
dg_mobcmd.c:    tmpmob.next_fighting = ch->next_fighting;
dg_mobcmd.c:    tmpmob.followers = ch->followers;
dg_mobcmd.c:    tmpmob.master = ch->master;
dg_objcmd.c:		next_ch = ch->next_in_room;
dg_objcmd.c:		next_ch = ch->next_in_room;
dg_objcmd.c:	    next_ch = ch->next_in_room;
dg_objcmd.c:	      		world[ch->in_room].name);
dg_scripts.c:    for (ch = world[vnum].people; ch !=NULL; ch = ch->next_in_room)
dg_scripts.c:  for (ch = character_list; ch; ch=ch->next)
dg_scripts.c:        if (ch && ((ch->player_specials == &dummy_mob) || !GET_INVIS_LEV(ch)))
dg_scripts.c:        for (ch = character_list; ch; ch = ch->next)
dg_scripts.c:            if (isname(name, ch->player.name) &&
dg_scripts.c:                ((ch->player_specials == &dummy_mob) ||
dg_scripts.c:        if (ch && ((ch->player_specials == &dummy_mob) || !GET_INVIS_LEV(ch)))
dg_scripts.c:        for (ch = room->people; ch; ch = ch->next_in_room)
dg_scripts.c:            if (isname(name, ch->player.name) &&
dg_scripts.c:                ((ch->player_specials == &dummy_mob) ||
dg_scripts.c:        for (ch = character_list; ch; ch = ch->next)
dg_scripts.c:            if (isname(name, ch->player.name) &&
dg_scripts.c:                ((ch->player_specials == &dummy_mob) ||
dg_scripts.c:  for (ch = character_list; ch; ch = ch->next) {
dg_scripts.c:    page_string(ch->desc, sb, 1);
dg_scripts.c:    strcpy(name, ch->player.name);
dg_scripts.c:  struct room_data *rm = &world[ch->in_room];
dg_scripts.c:      if ((object = get_object_in_equip_vis(ch, arg1, ch->equipment, &tmp)));
dg_scripts.c:      else if ((object = get_obj_in_list_vis(ch, arg1, ch->carrying)));
dg_scripts.c:	else if ((o = get_obj_in_list(name, ch->carrying)));
dg_scripts.c:  else page_string(ch->desc, pagebuf, TRUE);
dg_scripts.c:* scans for end of while/switch-blocks.   
dg_triggers.c:  for (ch = world[IN_ROOM(actor)].people; ch; ch = ch->next_in_room) {
dg_triggers.c:  for (ch = world[IN_ROOM(actor)].people; ch; ch = ch->next_in_room) {
dg_triggers.c:    ch_next = ch->next_in_room;
dg_triggers.c:    ch_next = ch->next_in_room;
dg_wldcmd.c:	    next_ch = ch->next_in_room;
dg_wldcmd.c:	    next_ch = ch->next_in_room;
dg_wldcmd.c:	    next_ch = ch->next_in_room;
dg_wldcmd.c:	      		world[ch->in_room].name);
fight.c:  ch->next_fighting = combat_list;
fight.c:  for (af = ch->affected; af; af = next) {
fight.c:    next_combat_list = ch->next_fighting;
fight.c:  ch->next_fighting = NULL;
fight.c:  corpse->contains = ch->carrying;
fight.c:    if (IS_NPC(ch) || (!IS_NPC(ch) && ch->desc)) {
fight.c:  ch->carrying = NULL;
fight.c:  obj_to_room(corpse, ch->in_room);
fight.c:  was_in = ch->in_room;
fight.c:      ch->in_room = world[was_in].dir_option[door]->to_room;
fight.c:      ch->in_room = was_in;
fight.c:if (ROOM_FLAGGED(ch->in_room, ROOM_UNUSED)) {
fight.c:  while (ch->affected)
fight.c:    affect_remove(ch, ch->affected);
fight.c:  if (!(k = ch->master))
fight.c:  if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
fight.c:    if (AFF_FLAGGED(f->follower, AFF_GROUP) && f->follower->in_room == ch->in_room)
fight.c:  if (AFF_FLAGGED(k, AFF_GROUP) && k->in_room == ch->in_room)
fight.c:    if (AFF_FLAGGED(f->follower, AFF_GROUP) && f->follower->in_room == ch->in_room)
fight.c:  if (ch != victim && ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
fight.c:  if (ch->in_room != victim->in_room) {
fight.c:    if (IS_NPC(ch) && (ch->mob_specials.attack_type != 0))
fight.c:      w_type = ch->mob_specials.attack_type + TYPE_HIT;
fight.c:	dam += dice(ch->mob_specials.damnodice, ch->mob_specials.damsizedice);
fight.c:    next_combat_list = ch->next_fighting;
fight.c:    if (FIGHTING(ch) == NULL || ch->in_room != FIGHTING(ch)->in_room) {
graph.c:  dir = find_first_step(ch->in_room, vict->in_room);
graph.c:  if ((dir = find_first_step(ch->in_room, HUNTING(ch)->in_room)) < 0) {
graph.c:    if (ch->in_room == HUNTING(ch)->in_room)
handler.c:    ch->player.time.birth -= (mod * SECS_PER_MUD_YEAR);
handler.c:  for (af = ch->affected; af; af = af->next)
handler.c:  ch->aff_abils = ch->real_abils;
handler.c:  for (af = ch->affected; af; af = af->next)
handler.c:  affected_alloc->next = ch->affected;
handler.c:  ch->affected = affected_alloc;
handler.c:  if (ch->affected == NULL) {
handler.c:  REMOVE_FROM_LIST(af, ch->affected, next);
handler.c:  for (hjp = ch->affected; hjp; hjp = next) {
handler.c:  for (hjp = ch->affected; hjp; hjp = hjp->next)
handler.c:  for (hjp = ch->affected; !found && hjp; hjp = hjp->next) {
handler.c:  if (ch == NULL || ch->in_room == NOWHERE) {
handler.c:	world[ch->in_room].light--;
handler.c:  REMOVE_FROM_LIST(ch, world[ch->in_room].people, next_in_room);
handler.c:  ch->in_room = NOWHERE;
handler.c:  ch->next_in_room = NULL;
handler.c:    ch->next_in_room = world[room].people;
handler.c:    ch->in_room = room;
handler.c:    object->next_content = ch->carrying;
handler.c:    ch->carrying = object;
handler.c:  if (ch->in_room != NOWHERE) {
handler.c:	world[ch->in_room].light++;
handler.c:    log("SYSERR: ch->in_room = NOWHERE when equipping char %s.", GET_NAME(ch));
handler.c:  if (ch->in_room != NOWHERE) {
handler.c:	world[ch->in_room].light--;
handler.c:    log("SYSERR: ch->in_room = NOWHERE when unequipping char %s.", GET_NAME(ch));
handler.c:	  world[ch->in_room].light--;
handler.c:  if (ch->carrying)
handler.c:    update_object(ch->carrying, 1);
handler.c:  if (!IS_NPC(ch) && !ch->desc) {
handler.c:  if (ch->in_room == NOWHERE) {
handler.c:  if (ch->followers || ch->master)
handler.c:  if (ch->desc) {
handler.c:    if (ch->desc->snooping) {
handler.c:      ch->desc->snooping->snoop_by = NULL;
handler.c:      ch->desc->snooping = NULL;
handler.c:    if (ch->desc->snoop_by) {
handler.c:		ch->desc->snoop_by);
handler.c:      ch->desc->snoop_by->snooping = NULL;
handler.c:      ch->desc->snoop_by = NULL;
handler.c:  while (ch->carrying) {
handler.c:    obj = ch->carrying;
handler.c:    obj_to_room(obj, ch->in_room);
handler.c:      obj_to_room(unequip_char(ch, i), ch->in_room);
handler.c:  if (ch->desc && ch->desc->original)
handler.c:  if (!freed && ch->desc != NULL) {
handler.c:    STATE(ch->desc) = CON_MENU;
handler.c:    SEND_TO_Q(MENU, ch->desc);
handler.c:    if (!IS_NPC(i) && (!inroom || i->in_room == ch->in_room) &&
handler.c:  for (i = world[ch->in_room].people; i && j <= number; i = i->next_in_room)
handler.c:  if ((i = get_obj_in_list_vis(ch, name, ch->carrying)))
handler.c:  if ((i = get_obj_in_list_vis(ch, name, world[ch->in_room].contents)))
handler.c:    if ((*tar_obj = get_obj_in_list_vis(ch, name, ch->carrying))) {
handler.c:    if ((*tar_obj = get_obj_in_list_vis(ch, name, world[ch->in_room].contents))) {
Binary file handler.o matches
interpreter.c://   else if (!str_cmp(ch->player.name, "Griff"))
interpreter.c:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
interpreter.c:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
interpreter.c:  for (i = ch->carrying; i; i = i->next_content)
interpreter.c:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
interpreter.c:  for (i = world[ch->in_room].contents; i; i = i->next_content)
interpreter.c:    next_ch = ch->next;
interpreter.c:    if (ch->desc)
interpreter.c:    if (ch->in_room != NOWHERE)
interpreter.c.:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
interpreter.c.:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
interpreter.c.:  for (i = ch->carrying; i; i = i->next_content)
interpreter.c.:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
interpreter.c.:  for (i = world[ch->in_room].contents; i; i = i->next_content)
interpreter.c.:    next_ch = ch->next;
interpreter.c.:    if (ch->desc)
interpreter.c.:    if (ch->in_room != NOWHERE)
interpreter.c.org:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
interpreter.c.org:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
interpreter.c.org:  for (i = ch->carrying; i; i = i->next_content)
interpreter.c.org:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
interpreter.c.org:  for (i = world[ch->in_room].contents; i; i = i->next_content)
interpreter.c.org:    next_ch = ch->next;
interpreter.c.org:    if (ch->desc)
interpreter.c.org:    if (ch->in_room != NOWHERE)
interpreter.save:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
interpreter.save:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
interpreter.save:  for (i = ch->carrying; i; i = i->next_content)
interpreter.save:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
interpreter.save:  for (i = world[ch->in_room].contents; i; i = i->next_content)
interpreter.save:    next_ch = ch->next;
interpreter.save:    if (ch->desc)
interpreter.save:    if (ch->in_room != NOWHERE)
limits.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GOOD_REGEN))
limits.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
limits.c:  if (++(ch->char_specials.timer) > idle_void) {
limits.c:    if (GET_WAS_IN(ch) == NOWHERE && ch->in_room != NOWHERE) {
limits.c:      GET_WAS_IN(ch) = ch->in_room;
limits.c:    } else if (ch->char_specials.timer > idle_rent_time) {
limits.c:      if (ch->in_room != NOWHERE)
limits.c:      if (ch->desc) {
limits.c:	STATE(ch->desc) = CON_DISCONNECT;
limits.c:	ch->desc->character = NULL;
limits.c:	ch->desc = NULL;
magic.c:  for (tobj = ch->carrying; tobj; tobj = tobj->next_content) {
magic.c:          (victim->master->in_room == ch->in_room)) {
magic.c:  if (ch->master != NULL)
magic.c:    k = ch->master;
magic.c:    if (tch->in_room != ch->in_room)
magic.c:  for (tch = world[ch->in_room].people; tch; tch = tch_next) {
magic.c:    tch_next = tch->next_in_room;
magic.c:  for (tch = world[ch->in_room].people; tch; tch = next_tch) {
magic.c:    next_tch = tch->next_in_room;
magic.c:    char_to_room(mob, ch->in_room);
mail.c:  if (!ch->desc || IS_NPC(ch))
mail.c:  ch->desc->mail_to = recipient;
mail.c:  ch->desc->str = (char **) malloc(sizeof(char *));
mail.c:  *(ch->desc->str) = NULL;
mail.c:  ch->desc->max_str = MAX_MAIL_SIZE;
mobact.c:    next_ch = ch->next;
mobact.c:      if (world[ch->in_room].contents && !number(0, 10)) {
mobact.c:	for (obj = world[ch->in_room].contents; obj; obj = obj->next_content)
mobact.c:	 (world[EXIT(ch, door)->to_room].zone == world[ch->in_room].zone))) {
mobact.c:      for (vict = world[ch->in_room].people; vict && !found; vict = vict->next_in_room) {
mobact.c:      for (vict = world[ch->in_room].people; vict && !found; vict = vict->next_in_room) {
mobact.c:      for (vict = world[ch->in_room].people; vict && !found; vict = vict->next_in_room)
objsave.c:  if (!Crash_save(ch->carrying, fp)) {
objsave.c:  Crash_restore_weight(ch->carrying);
objsave.c:  Crash_extract_norents(ch->carrying);
objsave.c:  Crash_calculate_rent(ch->carrying, &cost);
objsave.c:  while ((cost > GET_GOLD(ch) + GET_BANK_GOLD(ch)) && ch->carrying) {
objsave.c:    Crash_extract_expensive(ch->carrying);
objsave.c:    Crash_calculate_rent(ch->carrying, &cost);
objsave.c:  if (!ch->carrying) {
objsave.c:  if (!Crash_save(ch->carrying, fp)) {
objsave.c:  Crash_extract_objs(ch->carrying);
objsave.c:  Crash_extract_norents(ch->carrying);
objsave.c:  if (!Crash_save(ch->carrying, fp)) {
objsave.c:  Crash_extract_objs(ch->carrying);
objsave.c:  Crash_extract_norents(ch->carrying);
objsave.c:  if (!Crash_save(ch->carrying, fp)) {
objsave.c:  Crash_extract_objs(ch->carrying);
objsave.c:  norent = Crash_report_unrentables(ch, receptionist, ch->carrying);
objsave.c:  Crash_report_rent(ch, receptionist, ch->carrying, &totalcost, &numitems, display, factor);
objsave.c:  if (!ch->desc || IS_NPC(ch))
objsave.c:    save_room = ch->in_room;
olc.c:   d = ch->desc;
olc.c:        CREATE(ch->desc->olc, struct olc_data, 1);
olc.c:        CREATE(OLC_ROOM(ch->desc), struct room_data, 1);
olc.c:        OLC_ZNUM(ch->desc) = world[ch->in_room].zone;
olc.c:        OLC_NUM(ch->desc) = k;
olc.c:        OLC_ROOM(ch->desc)->number = k;
olc.c:        OLC_ROOM(ch->desc)->zone = world[ch->in_room].zone;
olc.c:        OLC_ROOM(ch->desc)->name = str_dup("An unfinished room");
olc.c:        OLC_ROOM(ch->desc)->description = str_dup("You are in an unfinished room.\r\n");
olc.c:        OLC_ITEM_TYPE(ch->desc) = WLD_TRIGGER;
olc.c:        OLC_VAL(ch->desc) = 0;
olc.c:        redit_save_internally(ch->desc);
olc.c:        cleanup_olc(ch->desc, CLEANUP_STRUCTS);
olc.c:    if (!world[ch->in_room].dir_option[dir]) {
points.practice:act.comm.c:         ch->real_abils.rage += 1;
points.practice:act.comm.c:    if (ch->master)
points.practice:act.comm.c:      k = ch->master;
points.practice:act.comm.c:  else if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF))
points.practice:act.comm.c:      tch = tch->next;
points.practice:act.comm.c:  if (!ch->desc)
points.practice:act.comm.c:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
points.practice:act.comm.c:    if (!(pen = get_obj_in_list_vis(ch, penname, ch->carrying))) {
points.practice:act.comm.c:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
points.practice:act.comm.c:     ch->desc->backstr = NULL;
points.practice:act.comm.c:	ch->desc->backstr = str_dup(paper->action_description);
points.practice:act.comm.c:    ch->desc->str = &paper->action_description;
points.practice:act.comm.c:    ch->desc->max_str = MAX_NOTE_LENGTH;
points.practice:act.comm.c:  if (!ch->desc)
points.practice:act.comm.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF)) {
points.practice:act.comm.c:if (!str_cmp(ch->player.name, "Tuskino"))
points.practice:act.comm.c:else if (!str_cmp(ch->player.name, "Xylam"))
points.practice:act.comm.c:else if (!str_cmp(ch->player.name, "Griff"))
points.practice:act.comm.c:    if (STATE(i) == CON_PLAYING && i != ch->desc && i->character &&
points.practice:act.comm.c:	  ((world[ch->in_room].zone != world[i->character->in_room].zone) ||
points.practice:act.comm.c:      if (STATE(i) == CON_PLAYING && i != ch->desc &&
points.practice:act.comm.c.save:         ch->real_abils.rage += 2;
points.practice:act.comm.c.save:    if (ch->master)
points.practice:act.comm.c.save:      k = ch->master;
points.practice:act.comm.c.save:  else if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF))
points.practice:act.comm.c.save:      tch = tch->next;
points.practice:act.comm.c.save:  if (!ch->desc)
points.practice:act.comm.c.save:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
points.practice:act.comm.c.save:    if (!(pen = get_obj_in_list_vis(ch, penname, ch->carrying))) {
points.practice:act.comm.c.save:    if (!(paper = get_obj_in_list_vis(ch, papername, ch->carrying))) {
points.practice:act.comm.c.save:     ch->desc->backstr = NULL;
points.practice:act.comm.c.save:	ch->desc->backstr = str_dup(paper->action_description);
points.practice:act.comm.c.save:    ch->desc->str = &paper->action_description;
points.practice:act.comm.c.save:    ch->desc->max_str = MAX_NOTE_LENGTH;
points.practice:act.comm.c.save:  if (!ch->desc)
points.practice:act.comm.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF)) {
points.practice:act.comm.c.save:    if (STATE(i) == CON_PLAYING && i != ch->desc && i->character &&
points.practice:act.comm.c.save:	  ((world[ch->in_room].zone != world[i->character->in_room].zone) ||
points.practice:act.comm.c.save:      if (STATE(i) == CON_PLAYING && i != ch->desc &&
points.practice:act.informative.:	page_string(ch->desc, buf, 1);
points.practice:act.informative.:  page_string(ch->desc, buf, TRUE);
points.practice:act.informative.:  if (!ch->desc)
points.practice:act.informative.:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
points.practice:act.informative.:  if (!ch->desc)
points.practice:act.informative.:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
points.practice:act.informative.:  send_to_char(world[ch->in_room].name, ch);
points.practice:act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
points.practice:act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
points.practice:act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
points.practice:act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
points.practice:act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
points.practice:act.informative.:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
points.practice:act.informative.:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
points.practice:act.informative.:    send_to_char(world[ch->in_room].description, ch);
points.practice:act.informative.:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
points.practice:act.informative.:  list_char_to_char(world[ch->in_room].people, ch);
points.practice:act.informative.:  if (!ch->desc)
points.practice:act.informative.:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
points.practice:act.informative.:    page_string(ch->desc, desc, FALSE);
points.practice:act.informative.:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
points.practice:act.informative.:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
points.practice:act.informative.:  if (!ch->desc)
points.practice:act.informative.:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
points.practice:act.informative.:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
points.practice:act.informative.:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
points.practice:act.informative.:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
points.practice:act.informative.:  if (!ch->desc)
points.practice:act.informative.:    page_string(ch->desc, help, 0);
points.practice:act.informative.:  page_string(ch->desc, entry, 0);
points.practice:act.informative.:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
points.practice:act.informative.:    if (who_room && (tch->in_room != ch->in_room))
points.practice:act.informative.://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.:/*      if (!str_cmp(ch->player.name, "Tuskino") && GET_SEX(tch) == SEX_MALE && GET_LEVEL(tch) == LVL_IMPL)
points.practice:act.informative.:      if (!str_cmp(ch->player.name, "Misato") && GET_SEX(tch) == SEX_FEMALE)
points.practice:act.informative.:      if (!str_cmp(ch->player.name, "Zero") && GET_SEX(tch) == SEX_MALE && GET_LEVEL(tch) == LVL_IMPL)
points.practice:act.informative.:    page_string(ch->desc, credits, 0);
points.practice:act.informative.:    page_string(ch->desc, news, 0);
points.practice:act.informative.:    page_string(ch->desc, info, 0);
points.practice:act.informative.:    page_string(ch->desc, wizlist, 0);
points.practice:act.informative.:    page_string(ch->desc, immlist, 0);
points.practice:act.informative.:    page_string(ch->desc, handbook, 0);
points.practice:act.informative.:    page_string(ch->desc, policies, 0);
points.practice:act.informative.:    page_string(ch->desc, motd, 0);
points.practice:act.informative.:    page_string(ch->desc, imotd, 0);
points.practice:act.informative.:      if (world[ch->in_room].zone != world[i->in_room].zone)
points.practice:act.informative.:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
points.practice:act.informative.:         ch->real_abils.ubs += 1;
points.practice:act.informative.:         ch->real_abils.lbs -= 1;
points.practice:act.informative.:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.:         ch->real_abils.ubs += 1;
points.practice:act.informative.:         ch->real_abils.lbs -= 1;
points.practice:act.informative.:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
points.practice:act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.:  is_in = ch->in_room;
points.practice:act.informative.:    ch->in_room = is_in;
points.practice:act.informative.:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:act.informative.:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
points.practice:act.informative.:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
points.practice:act.informative.:  ch->in_room = is_in;
points.practice:act.informative.:         ch->real_abils.ubs += 1;
points.practice:act.informative.:         ch->real_abils.lbs -= 1;
points.practice:act.informative.:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.:  page_string(ch->desc, buf, 1);
points.practice:act.informative.c:	page_string(ch->desc, buf, 1);
points.practice:act.informative.c:  page_string(ch->desc, buf, TRUE);
points.practice:act.informative.c:  if (!ch->desc)
points.practice:act.informative.c:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
points.practice:act.informative.c:  if (!ch->desc)
points.practice:act.informative.c:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.c:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
points.practice:act.informative.c:  send_to_char(world[ch->in_room].name, ch);
points.practice:act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
points.practice:act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
points.practice:act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
points.practice:act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
points.practice:act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
points.practice:act.informative.c:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
points.practice:act.informative.c:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
points.practice:act.informative.c:    send_to_char(world[ch->in_room].description, ch);
points.practice:act.informative.c:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
points.practice:act.informative.c:  list_char_to_char(world[ch->in_room].people, ch);
points.practice:act.informative.c:  if (!ch->desc)
points.practice:act.informative.c:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
points.practice:act.informative.c:    page_string(ch->desc, desc, FALSE);
points.practice:act.informative.c:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
points.practice:act.informative.c:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
points.practice:act.informative.c:  if (!ch->desc)
points.practice:act.informative.c:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.c:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
points.practice:act.informative.c:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
points.practice:act.informative.c:  if (!ch->desc)
points.practice:act.informative.c:    page_string(ch->desc, help, 0);
points.practice:act.informative.c:  page_string(ch->desc, entry, 0);
points.practice:act.informative.c:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
points.practice:act.informative.c:    if (who_room && (tch->in_room != ch->in_room))
points.practice:act.informative.c:       if (!str_cmp(tch->player.name, "Iovan"))
points.practice:act.informative.c:       if (!str_cmp(tch->player.name, "Kuvoc"))
points.practice:act.informative.c:       if (!str_cmp(tch->player.name, "Lilia"))
points.practice:act.informative.c:       if (!str_cmp(tch->player.name, "Solbet"))
points.practice:act.informative.c:       if (!str_cmp(tch->player.name, "Grubby"))
points.practice:act.informative.c:       if (!str_cmp(tch->player.name, "Xyron"))
points.practice:act.informative.c:       if (!str_cmp(tch->player.name, "Shou"))
points.practice:act.informative.c:    page_string(ch->desc, credits, 0);
points.practice:act.informative.c:    page_string(ch->desc, news, 0);
points.practice:act.informative.c:    page_string(ch->desc, info, 0);
points.practice:act.informative.c:    page_string(ch->desc, wizlist, 0);
points.practice:act.informative.c:    page_string(ch->desc, immlist, 0);
points.practice:act.informative.c:    page_string(ch->desc, handbook, 0);
points.practice:act.informative.c:    page_string(ch->desc, policies, 0);
points.practice:act.informative.c:    page_string(ch->desc, motd, 0);
points.practice:act.informative.c:    page_string(ch->desc, imotd, 0);
points.practice:act.informative.c:      if (world[ch->in_room].zone != world[i->in_room].zone)
points.practice:act.informative.c:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
points.practice:act.informative.c:         ch->real_abils.ubs += 1;
points.practice:act.informative.c:         ch->real_abils.lbs -= 1;
points.practice:act.informative.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
points.practice:act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/200)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MANA(ch) >= GET_MAX_MANA(ch)/150)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MANA(ch) >= GET_MAX_MANA(ch)/100)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MANA(ch) >= GET_MAX_MANA(ch)/75)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c:         ch->real_abils.ubs += 1;
points.practice:act.informative.c:         ch->real_abils.lbs -= 1;
points.practice:act.informative.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
points.practice:act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/200)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MANA(ch) >= GET_MAX_MANA(ch)/150)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MANA(ch) >= GET_MAX_MANA(ch)/100)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MANA(ch) >= GET_MAX_MANA(ch)/75)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MANA(ch) >= GET_MAX_MANA(ch)/250)
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c:  is_in = ch->in_room;
points.practice:act.informative.c:    ch->in_room = is_in;
points.practice:act.informative.c:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:act.informative.c:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
points.practice:act.informative.c:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
points.practice:act.informative.c:  ch->in_room = is_in;
points.practice:act.informative.c:         ch->real_abils.ubs += 1;
points.practice:act.informative.c:         ch->real_abils.lbs -= 1;
points.practice:act.informative.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.c:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c:  page_string(ch->desc, buf, 1);
points.practice:act.informative.c~:	page_string(ch->desc, buf, 1);
points.practice:act.informative.c~:  page_string(ch->desc, buf, TRUE);
points.practice:act.informative.c~:  if (!ch->desc)
points.practice:act.informative.c~:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
points.practice:act.informative.c~:  if (!ch->desc)
points.practice:act.informative.c~:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.c~:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
points.practice:act.informative.c~:	    world[ch->in_room].name, buf);
points.practice:act.informative.c~:  send_to_char(world[ch->in_room].name, ch);
points.practice:act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
points.practice:act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HVLOW)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HLOW)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HMED)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HHIGH)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HVHIGH)) {
points.practice:act.informative.c~:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HNOLIM)) {
points.practice:act.informative.c~:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
points.practice:act.informative.c~:    send_to_char(world[ch->in_room].description, ch);
points.practice:act.informative.c~:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
points.practice:act.informative.c~:  list_char_to_char(world[ch->in_room].people, ch);
points.practice:act.informative.c~:  if (!ch->desc)
points.practice:act.informative.c~:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
points.practice:act.informative.c~:    page_string(ch->desc, desc, FALSE);
points.practice:act.informative.c~:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
points.practice:act.informative.c~:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
points.practice:act.informative.c~:  if (!ch->desc)
points.practice:act.informative.c~:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.c~:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
points.practice:act.informative.c~:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
points.practice:act.informative.c~:  if (!ch->desc)
points.practice:act.informative.c~:    page_string(ch->desc, help, 0);
points.practice:act.informative.c~:  page_string(ch->desc, entry, 0);
points.practice:act.informative.c~:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
points.practice:act.informative.c~:    if (who_room && (tch->in_room != ch->in_room))
points.practice:act.informative.c~:    page_string(ch->desc, credits, 0);
points.practice:act.informative.c~:    page_string(ch->desc, news, 0);
points.practice:act.informative.c~:    page_string(ch->desc, info, 0);
points.practice:act.informative.c~:    page_string(ch->desc, wizlist, 0);
points.practice:act.informative.c~:    page_string(ch->desc, immlist, 0);
points.practice:act.informative.c~:    page_string(ch->desc, handbook, 0);
points.practice:act.informative.c~:    page_string(ch->desc, policies, 0);
points.practice:act.informative.c~:    page_string(ch->desc, motd, 0);
points.practice:act.informative.c~:    page_string(ch->desc, imotd, 0);
points.practice:act.informative.c~:      if (world[ch->in_room].zone != world[i->in_room].zone)
points.practice:act.informative.c~:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
points.practice:act.informative.c~:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c~:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
points.practice:act.informative.c~:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
points.practice:act.informative.c~:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c~:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c~:  is_in = ch->in_room;
points.practice:act.informative.c~:    ch->in_room = is_in;
points.practice:act.informative.c~:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:act.informative.c~:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
points.practice:act.informative.c~:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
points.practice:act.informative.c~:  ch->in_room = is_in;
points.practice:act.informative.ch:	page_string(ch->desc, buf, 1);
points.practice:act.informative.ch:  page_string(ch->desc, buf, TRUE);
points.practice:act.informative.ch:  if (!ch->desc)
points.practice:act.informative.ch:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
points.practice:act.informative.ch:  if (!ch->desc)
points.practice:act.informative.ch:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.ch:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
points.practice:act.informative.ch:  send_to_char(world[ch->in_room].name, ch);
points.practice:act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
points.practice:act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
points.practice:act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
points.practice:act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
points.practice:act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
points.practice:act.informative.ch:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
points.practice:act.informative.ch:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
points.practice:act.informative.ch:    send_to_char(world[ch->in_room].description, ch);
points.practice:act.informative.ch:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
points.practice:act.informative.ch:  list_char_to_char(world[ch->in_room].people, ch);
points.practice:act.informative.ch:  if (!ch->desc)
points.practice:act.informative.ch:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
points.practice:act.informative.ch:    page_string(ch->desc, desc, FALSE);
points.practice:act.informative.ch:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
points.practice:act.informative.ch:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
points.practice:act.informative.ch:  if (!ch->desc)
points.practice:act.informative.ch:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.ch:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
points.practice:act.informative.ch:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
points.practice:act.informative.ch:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
points.practice:act.informative.ch:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
points.practice:act.informative.ch:  if (!ch->desc)
points.practice:act.informative.ch:    page_string(ch->desc, help, 0);
points.practice:act.informative.ch:  page_string(ch->desc, entry, 0);
points.practice:act.informative.ch:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
points.practice:act.informative.ch:    if (who_room && (tch->in_room != ch->in_room))
points.practice:act.informative.ch://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.ch://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.ch:       if (!str_cmp(tch->player.name, "Tuskino"))
points.practice:act.informative.ch:       if (!str_cmp(tch->player.name, "Gohorin"))
points.practice:act.informative.ch:       if (!str_cmp(tch->player.name, "Heaven"))
points.practice:act.informative.ch:    page_string(ch->desc, credits, 0);
points.practice:act.informative.ch:    page_string(ch->desc, news, 0);
points.practice:act.informative.ch:    page_string(ch->desc, info, 0);
points.practice:act.informative.ch:    page_string(ch->desc, wizlist, 0);
points.practice:act.informative.ch:    page_string(ch->desc, immlist, 0);
points.practice:act.informative.ch:    page_string(ch->desc, handbook, 0);
points.practice:act.informative.ch:    page_string(ch->desc, policies, 0);
points.practice:act.informative.ch:    page_string(ch->desc, motd, 0);
points.practice:act.informative.ch:    page_string(ch->desc, imotd, 0);
points.practice:act.informative.ch:      if (world[ch->in_room].zone != world[i->in_room].zone)
points.practice:act.informative.ch:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
points.practice:act.informative.ch:         ch->real_abils.ubs += 1;
points.practice:act.informative.ch:         ch->real_abils.lbs -= 1;
points.practice:act.informative.ch:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.ch:         ch->real_abils.ubs += 1;
points.practice:act.informative.ch:         ch->real_abils.lbs -= 1;
points.practice:act.informative.ch:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
points.practice:act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.ch:  is_in = ch->in_room;
points.practice:act.informative.ch:    ch->in_room = is_in;
points.practice:act.informative.ch:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:act.informative.ch:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
points.practice:act.informative.ch:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
points.practice:act.informative.ch:  ch->in_room = is_in;
points.practice:act.informative.ch:         ch->real_abils.ubs += 1;
points.practice:act.informative.ch:         ch->real_abils.lbs -= 1;
points.practice:act.informative.ch:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.ch:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.ch:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.ch:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.ch:  page_string(ch->desc, buf, 1);
points.practice:act.informative.c.save:	page_string(ch->desc, buf, 1);
points.practice:act.informative.c.save:  page_string(ch->desc, buf, TRUE);
points.practice:act.informative.c.save:  if (!ch->desc)
points.practice:act.informative.c.save:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
points.practice:act.informative.c.save:  if (!ch->desc)
points.practice:act.informative.c.save:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.c.save:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
points.practice:act.informative.c.save:  send_to_char(world[ch->in_room].name, ch);
points.practice:act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
points.practice:act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
points.practice:act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
points.practice:act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
points.practice:act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
points.practice:act.informative.c.save:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
points.practice:act.informative.c.save:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
points.practice:act.informative.c.save:    send_to_char(world[ch->in_room].description, ch);
points.practice:act.informative.c.save:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
points.practice:act.informative.c.save:  list_char_to_char(world[ch->in_room].people, ch);
points.practice:act.informative.c.save:  if (!ch->desc)
points.practice:act.informative.c.save:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
points.practice:act.informative.c.save:    page_string(ch->desc, desc, FALSE);
points.practice:act.informative.c.save:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
points.practice:act.informative.c.save:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
points.practice:act.informative.c.save:  if (!ch->desc)
points.practice:act.informative.c.save:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.c.save:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
points.practice:act.informative.c.save:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
points.practice:act.informative.c.save:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
points.practice:act.informative.c.save:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
points.practice:act.informative.c.save:  if (!ch->desc)
points.practice:act.informative.c.save:    page_string(ch->desc, help, 0);
points.practice:act.informative.c.save:  page_string(ch->desc, entry, 0);
points.practice:act.informative.c.save:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
points.practice:act.informative.c.save:    if (who_room && (tch->in_room != ch->in_room))
points.practice:act.informative.c.save://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.c.save://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.c.save:       if (!str_cmp(tch->player.name, "Raiden"))
points.practice:act.informative.c.save:       if (!str_cmp(tch->player.name, "Tuskino"))
points.practice:act.informative.c.save:       if (!str_cmp(tch->player.name, "Gohorin"))
points.practice:act.informative.c.save:       if (!str_cmp(tch->player.name, "Rain"))
points.practice:act.informative.c.save:       if (!str_cmp(tch->player.name, "Misato"))
points.practice:act.informative.c.save:       if (!str_cmp(tch->player.name, "1Hiro"))
points.practice:act.informative.c.save:    page_string(ch->desc, credits, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, news, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, info, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, wizlist, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, immlist, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, handbook, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, policies, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, motd, 0);
points.practice:act.informative.c.save:    page_string(ch->desc, imotd, 0);
points.practice:act.informative.c.save:      if (world[ch->in_room].zone != world[i->in_room].zone)
points.practice:act.informative.c.save:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
points.practice:act.informative.c.save:         ch->real_abils.ubs += 1;
points.practice:act.informative.c.save:         ch->real_abils.lbs -= 1;
points.practice:act.informative.c.save:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c.save:         ch->real_abils.ubs += 1;
points.practice:act.informative.c.save:         ch->real_abils.lbs -= 1;
points.practice:act.informative.c.save:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
points.practice:act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c.save:  is_in = ch->in_room;
points.practice:act.informative.c.save:    ch->in_room = is_in;
points.practice:act.informative.c.save:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:act.informative.c.save:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
points.practice:act.informative.c.save:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
points.practice:act.informative.c.save:  ch->in_room = is_in;
points.practice:act.informative.c.save:         ch->real_abils.ubs += 1;
points.practice:act.informative.c.save:         ch->real_abils.lbs -= 1;
points.practice:act.informative.c.save:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.c.save:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.c.save:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.c.save:  page_string(ch->desc, buf, 1);
points.practice:act.informative.ctuskino:	page_string(ch->desc, buf, 1);
points.practice:act.informative.ctuskino:  page_string(ch->desc, buf, TRUE);
points.practice:act.informative.ctuskino:  if (!ch->desc)
points.practice:act.informative.ctuskino:      else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch) &&
points.practice:act.informative.ctuskino:  if (!ch->desc)
points.practice:act.informative.ctuskino:  if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.ctuskino:    sprintbit(ROOM_FLAGS(ch->in_room), room_bits, buf);
points.practice:act.informative.ctuskino:  send_to_char(world[ch->in_room].name, ch);
points.practice:act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10)) {
points.practice:act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100)) {
points.practice:act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200)) {
points.practice:act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300)) {
points.practice:act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400)) {
points.practice:act.informative.ctuskino:  else if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT)) {
points.practice:act.informative.ctuskino:      ROOM_FLAGGED(ch->in_room, ROOM_DEATH))
points.practice:act.informative.ctuskino:    send_to_char(world[ch->in_room].description, ch);
points.practice:act.informative.ctuskino:  list_obj_to_char(world[ch->in_room].contents, ch, 0, FALSE);
points.practice:act.informative.ctuskino:  list_char_to_char(world[ch->in_room].people, ch);
points.practice:act.informative.ctuskino:  if (!ch->desc)
points.practice:act.informative.ctuskino:  if ((desc = find_exdesc(arg, world[ch->in_room].ex_description)) != NULL) {
points.practice:act.informative.ctuskino:    page_string(ch->desc, desc, FALSE);
points.practice:act.informative.ctuskino:  for (obj = ch->carrying; obj && !found; obj = obj->next_content) {
points.practice:act.informative.ctuskino:  for (obj = world[ch->in_room].contents; obj && !found; obj = obj->next_content)
points.practice:act.informative.ctuskino:  if (!ch->desc)
points.practice:act.informative.ctuskino:  else if (IS_DARK(ch->in_room) && !CAN_SEE_IN_DARK(ch)) {
points.practice:act.informative.ctuskino:    list_char_to_char(world[ch->in_room].people, ch);	/* glowing red eyes */
points.practice:act.informative.ctuskino:  sprintf(buf, "%s&12Clan&15:&00       %s\r\n", buf, clan[(int) ch->player.clan]);
points.practice:act.informative.ctuskino:  sprintf(buf, "%s&12God&15:&00        %s\r\n", buf, god[(int) ch->player.god]);
points.practice:act.informative.ctuskino:  list_obj_to_char(ch->carrying, ch, 1, TRUE);
points.practice:act.informative.ctuskino:  if (!ch->desc)
points.practice:act.informative.ctuskino:    page_string(ch->desc, help, 0);
points.practice:act.informative.ctuskino:  page_string(ch->desc, entry, 0);
points.practice:act.informative.ctuskino:    if (localwho && world[ch->in_room].zone != world[tch->in_room].zone)
points.practice:act.informative.ctuskino:    if (who_room && (tch->in_room != ch->in_room))
points.practice:act.informative.ctuskino://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.ctuskino://	      CLASS_ABBR2(tch), GET_NAME(tch), GET_TITLE(tch), clan[(int) tch->player.clan]);
points.practice:act.informative.ctuskino:       if (!str_cmp(tch->player.name, "Tuskino"))
points.practice:act.informative.ctuskino:       if (!str_cmp(tch->player.name, "Gohorin"))
points.practice:act.informative.ctuskino:       if (!str_cmp(tch->player.name, "Heaven"))
points.practice:act.informative.ctuskino:    page_string(ch->desc, credits, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, news, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, info, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, wizlist, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, immlist, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, handbook, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, policies, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, motd, 0);
points.practice:act.informative.ctuskino:    page_string(ch->desc, imotd, 0);
points.practice:act.informative.ctuskino:      if (world[ch->in_room].zone != world[i->in_room].zone)
points.practice:act.informative.ctuskino:      if (!CAN_SEE(ch, i) || world[i->in_room].zone != world[ch->in_room].zone)
points.practice:act.informative.ctuskino:         ch->real_abils.ubs += 1;
points.practice:act.informative.ctuskino:         ch->real_abils.lbs -= 1;
points.practice:act.informative.ctuskino:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 501)
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.ctuskino:         ch->real_abils.ubs += 1;
points.practice:act.informative.ctuskino:         ch->real_abils.lbs -= 1;
points.practice:act.informative.ctuskino:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 16)
points.practice:act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 51)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 101)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 201)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 301)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 401)
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.ctuskino:  is_in = ch->in_room;
points.practice:act.informative.ctuskino:    ch->in_room = is_in;
points.practice:act.informative.ctuskino:        for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:act.informative.ctuskino:      if (!CAN_GO(ch, dir) || (world[ch->in_room].dir_option[dir]->to_room
points.practice:act.informative.ctuskino:        ch->in_room = world[ch->in_room].dir_option[dir]->to_room;
points.practice:act.informative.ctuskino:  ch->in_room = is_in;
points.practice:act.informative.ctuskino:         ch->real_abils.ubs += 1;
points.practice:act.informative.ctuskino:         ch->real_abils.lbs -= 1;
points.practice:act.informative.ctuskino:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) && GET_MOVE(ch) >= 51)
points.practice:act.informative.ctuskino:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) && GET_MOVE(ch) >= 101)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) && GET_MOVE(ch) >= 201)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) && GET_MOVE(ch) >= 301)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) && GET_MOVE(ch) >= 401)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.ctuskino:if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT) && GET_MOVE(ch) >= 501)
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV10) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV100) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV200) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV300) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GRAV400) &&
points.practice:act.informative.ctuskino:            !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SPIRIT))
points.practice:act.informative.ctuskino:  page_string(ch->desc, buf, 1);
points.practice:act.item.c:	if (!(obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
points.practice:act.item.c:	for (obj = ch->carrying; obj; obj = next_obj) {
points.practice:act.item.c:    if (!(obj = get_obj_in_list_vis(ch, arg, world[ch->in_room].contents))) {
points.practice:act.item.c:    for (obj = world[ch->in_room].contents; obj; obj = next_obj) {
points.practice:act.item.c:      for (cont = ch->carrying; cont; cont = cont->next_content)
points.practice:act.item.c:      for (cont = world[ch->in_room].contents; cont; cont = cont->next_content)
points.practice:act.item.c:	obj_to_room(obj, ch->in_room);
points.practice:act.item.c:    obj_to_room(obj, ch->in_room);
points.practice:act.item.c:      if (!ch->carrying)
points.practice:act.item.c:	for (obj = ch->carrying; obj; obj = next_obj) {
points.practice:act.item.c:      if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.item.c:      if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.item.c:      if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.item.c:      if (!ch->carrying)
points.practice:act.item.c:	for (obj = ch->carrying; obj; obj = next_obj) {
points.practice:act.item.c:  if (!(temp = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.item.c:    if (!(temp = get_obj_in_list_vis(ch, arg, world[ch->in_room].contents))) {
points.practice:act.item.c:  if (!(food = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.item.c:    if (!(from_obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
points.practice:act.item.c:    if (!(to_obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
points.practice:act.item.c:    if (!(from_obj = get_obj_in_list_vis(ch, arg2, world[ch->in_room].contents))) {
points.practice:act.item.c:    if (!(to_obj = get_obj_in_list_vis(ch, arg2, ch->carrying))) {
points.practice:act.item.c:    for (obj = ch->carrying; obj; obj = next_obj) {
points.practice:act.item.c:    if (!(obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
points.practice:act.item.c:    if (!(obj = get_obj_in_list_vis(ch, arg1, ch->carrying))) {
points.practice:act.item.c:  else if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.item.c:  else if (!(obj = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.item.c:    if (!(obj = get_object_in_equip_vis(ch, arg, ch->equipment, &i))) {
points.practice:act.movement.c:  if (ROOM_IDENTITY(ch->in_room) == DEAD_SEA)
points.practice:act.movement.c:  for (obj = ch->carrying; obj; obj = obj->next_content)
points.practice:act.movement.c:  if (AFF_FLAGGED(ch, AFF_MAJIN) && ch->master && ch->in_room == ch->master->in_room) {
points.practice:act.movement.c:         ch->real_abils.ubs -= 1;
points.practice:act.movement.c:         ch->real_abils.lbs += 1;
points.practice:act.movement.c:         ch->real_abils.dex += 1;
points.practice:act.movement.c:  if ((SECT(ch->in_room) == SECT_WATER_NOSWIM) ||
points.practice:act.movement.c:  need_movement = (movement_loss[SECT(ch->in_room)] +
points.practice:act.movement.c:    if (need_specials_check && ch->master)
points.practice:act.movement.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_ATRIUM)) {
points.practice:act.movement.c:  was_in = ch->in_room;
points.practice:act.movement.c:  if (ch->desc != NULL)
points.practice:act.movement.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_DEATH) && GET_LEVEL(ch) < LVL_IMMORT) {
points.practice:act.movement.c:    if (!ch->followers)
points.practice:act.movement.c:    was_in = ch->in_room;
points.practice:act.movement.c:    for (k = ch->followers; k; k = next) {
points.practice:act.movement.c:  for (o = ch->carrying; o; o = o->next_content)
points.practice:act.movement.c:      if (back->to_room != ch->in_room)
points.practice:act.movement.c:    OPEN_DOOR(ch->in_room, obj, door);
points.practice:act.movement.c:    LOCK_DOOR(ch->in_room, obj, door);
points.practice:act.movement.c:    LOCK_DOOR(ch->in_room, obj, door);
points.practice:act.movement.c:  } else if (ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
points.practice:act.movement.c:  if (!ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
points.practice:act.movement.c:  if (ch->master == leader) {
points.practice:act.movement.c:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master)) {
points.practice:act.movement.c:    act("But you only feel like following $N!", FALSE, ch, 0, ch->master, TO_CHAR);
points.practice:act.movement.c:      if (!ch->master) {
points.practice:act.movement.c:      if (ch->master)
points.practice:act.movement.c.save:  if (ROOM_IDENTITY(ch->in_room) == DEAD_SEA)
points.practice:act.movement.c.save:  for (obj = ch->carrying; obj; obj = obj->next_content)
points.practice:act.movement.c.save:  if (AFF_FLAGGED(ch, AFF_MAJIN) && ch->master && ch->in_room == ch->master->in_room) {
points.practice:act.movement.c.save:         ch->real_abils.ubs -= 1;
points.practice:act.movement.c.save:         ch->real_abils.lbs += 1;
points.practice:act.movement.c.save:         ch->real_abils.dex += 1;
points.practice:act.movement.c.save:  if ((SECT(ch->in_room) == SECT_WATER_NOSWIM) ||
points.practice:act.movement.c.save:  need_movement = (movement_loss[SECT(ch->in_room)] +
points.practice:act.movement.c.save:    if (need_specials_check && ch->master)
points.practice:act.movement.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_ATRIUM)) {
points.practice:act.movement.c.save:  was_in = ch->in_room;
points.practice:act.movement.c.save:  if (ch->desc != NULL)
points.practice:act.movement.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_DEATH) && GET_LEVEL(ch) < LVL_IMMORT) {
points.practice:act.movement.c.save:    if (!ch->followers)
points.practice:act.movement.c.save:    was_in = ch->in_room;
points.practice:act.movement.c.save:    for (k = ch->followers; k; k = next) {
points.practice:act.movement.c.save:  for (o = ch->carrying; o; o = o->next_content)
points.practice:act.movement.c.save:      if (back->to_room != ch->in_room)
points.practice:act.movement.c.save:    OPEN_DOOR(ch->in_room, obj, door);
points.practice:act.movement.c.save:    LOCK_DOOR(ch->in_room, obj, door);
points.practice:act.movement.c.save:    LOCK_DOOR(ch->in_room, obj, door);
points.practice:act.movement.c.save:  } else if (ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
points.practice:act.movement.c.save:  if (!ROOM_FLAGGED(ch->in_room, ROOM_INDOORS))
points.practice:act.movement.c.save:       if  (!str_cmp(ch->name,"Erimas")) {
points.practice:act.movement.c.save:    ch->points.max_hit = 30000;
points.practice:act.movement.c.save:    ch->points.max_mana = 30000;
points.practice:act.movement.c.save:    ch->points.max_move = 30000;
points.practice:act.movement.c.save:  if (ch->master == leader) {
points.practice:act.movement.c.save:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master)) {
points.practice:act.movement.c.save:    act("But you only feel like following $N!", FALSE, ch, 0, ch->master, TO_CHAR);
points.practice:act.movement.c.save:      if (!ch->master) {
points.practice:act.movement.c.save:      if (ch->master)
points.practice:act.offensive.c:      for (opponent = world[ch->in_room].people;
points.practice:act.offensive.c:  } else if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == vict))
points.practice:act.offensive.c:      if (AFF_FLAGGED(ch, AFF_MAJIN) && !IS_NPC(ch->master) && !IS_NPC(vict))
points.practice:act.offensive.c:      org_room = ch->in_room;
points.practice:act.offensive.c:      for (k = ch->followers; k; k = k->next) {
points.practice:act.offensive.c:  for (tmp_ch = world[ch->in_room].people; tmp_ch &&
points.practice:act.offensive.c:       (FIGHTING(tmp_ch) != vict); tmp_ch = tmp_ch->next_in_room);
points.practice:act.offensive.c.save:      for (opponent = world[ch->in_room].people;
points.practice:act.offensive.c.save:  } else if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == vict))
points.practice:act.offensive.c.save:      if (AFF_FLAGGED(ch, AFF_MAJIN) && !IS_NPC(ch->master) && !IS_NPC(vict))
points.practice:act.offensive.c.save:      org_room = ch->in_room;
points.practice:act.offensive.c.save:      for (k = ch->followers; k; k = k->next) {
points.practice:act.offensive.c.save:  for (tmp_ch = world[ch->in_room].people; tmp_ch &&
points.practice:act.offensive.c.save:       (FIGHTING(tmp_ch) != vict); tmp_ch = tmp_ch->next_in_room);
points.practice:act.other.c:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
points.practice:act.other.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_SOUNDPROOF))
points.practice:act.other.c:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
points.practice:act.other.c:      if (d == ch->desc)
points.practice:act.other.c:   save_room = ch->in_room;
points.practice:act.other.c:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
points.practice:act.other.c:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c:  if (ch->master) {
points.practice:act.other.c:    for (found = 0, f = ch->followers; f; f = f->next)
points.practice:act.other.c:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
points.practice:act.other.c:    for (f = ch->followers; f; f = next_fol) {
points.practice:act.other.c:  if (tch->master != ch) {
points.practice:act.other.c:  k = (ch->master ? ch->master : ch);
points.practice:act.other.c:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
points.practice:act.other.c:	  (f->follower->in_room == ch->in_room))
points.practice:act.other.c:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
points.practice:act.other.c:	  (f->follower->in_room == ch->in_room) &&
points.practice:act.other.c:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.other.c:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.other.c:  if (!*argument && ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL))
points.practice:act.other.c:  else if (!*argument && !ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
points.practice:act.other.c:    if (!str_cmp(arg,"ki") && !ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
points.practice:act.other.c:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c:  if (!str_cmp(arg,"hp") && !ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
points.practice:act.other.c:   if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_SOUNDPROOF))
points.practice:act.other.c:else if (!str_cmp(ch->player.name, "jimmybobstuff8750850875") && GET_LEVEL(ch) < 1000014)
points.practice:act.other.c:else if (!str_cmp(ch->player.name, "joe65497497") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c:else if (!str_cmp(ch->player.name, "mcdallleybob") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c:else if (!str_cmp(ch->player.name, "87508658758569698") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c:    if (!(obj1 = get_obj_in_list_vis(ch, arg1, ch->carrying)))
points.practice:act.other.c:	for (obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content)
points.practice:act.other.c:    else if (!(obj2 = get_obj_in_list_vis(ch, arg2, ch->carrying)))
points.practice:act.other.c.:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
points.practice:act.other.c.:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_NOQUIT))
points.practice:act.other.c.:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
points.practice:act.other.c.:      if (d == ch->desc)
points.practice:act.other.c.:   save_room = ch->in_room;
points.practice:act.other.c.:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c.:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
points.practice:act.other.c.:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c.:  if (ch->master) {
points.practice:act.other.c.:    for (found = 0, f = ch->followers; f; f = f->next)
points.practice:act.other.c.:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
points.practice:act.other.c.:    for (f = ch->followers; f; f = next_fol) {
points.practice:act.other.c.:  if (tch->master != ch) {
points.practice:act.other.c.:  k = (ch->master ? ch->master : ch);
points.practice:act.other.c.:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c.:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
points.practice:act.other.c.:	  (f->follower->in_room == ch->in_room))
points.practice:act.other.c.:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
points.practice:act.other.c.:	  (f->follower->in_room == ch->in_room) &&
points.practice:act.other.c.:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.other.c.:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.other.c.:  if (!*argument && IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
points.practice:act.other.c.:  else if (!*argument && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.:    if (!str_cmp(arg,"ki") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.:  if (!str_cmp(arg,"hp") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.:  else if (!str_cmp(ch->player.name, "Misato") && GET_LEVEL(ch) < LVL_ARCANE)
points.practice:act.other.c.:  else if (!str_cmp(ch->player.name, "Heaven") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) == LVL_IMPL)
points.practice:act.other.c.org:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c.org:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
points.practice:act.other.c.org:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_NOQUIT))
points.practice:act.other.c.org:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
points.practice:act.other.c.org:      if (d == ch->desc)
points.practice:act.other.c.org:   save_room = ch->in_room;
points.practice:act.other.c.org:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c.org:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
points.practice:act.other.c.org:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c.org:  if (ch->master) {
points.practice:act.other.c.org:    for (found = 0, f = ch->followers; f; f = f->next)
points.practice:act.other.c.org:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
points.practice:act.other.c.org:    for (f = ch->followers; f; f = next_fol) {
points.practice:act.other.c.org:  if (tch->master != ch) {
points.practice:act.other.c.org:  k = (ch->master ? ch->master : ch);
points.practice:act.other.c.org:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c.org:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
points.practice:act.other.c.org:	  (f->follower->in_room == ch->in_room))
points.practice:act.other.c.org:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
points.practice:act.other.c.org:	  (f->follower->in_room == ch->in_room) &&
points.practice:act.other.c.org:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.other.c.org:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.org:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.other.c.org:  if (!*argument && IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
points.practice:act.other.c.org:  else if (!*argument && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.org:    if (!str_cmp(arg,"ki") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.org:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.org:  if (!str_cmp(arg,"hp") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.org:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.org:  else if (!str_cmp(ch->player.name, "Misato") && GET_LEVEL(ch) < LVL_ARCANE)
points.practice:act.other.c.org:  else if (!str_cmp(ch->player.name, "Heaven") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.org:  else if (!str_cmp(ch->player.name, "Tuskino") && GET_LEVEL(ch) == LVL_IMPL)
points.practice:act.other.c.save:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_ND))
points.practice:act.other.c.save:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_NOQUIT))
points.practice:act.other.c.save:*  if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HOTEL))
points.practice:act.other.c.save:      if (d == ch->desc)
points.practice:act.other.c.save:   save_room = ch->in_room;
points.practice:act.other.c.save:  if (IS_NPC(ch) || !ch->desc)
points.practice:act.other.c.save:  if (ROOM_FLAGGED(ch->in_room, ROOM_HOUSE_CRASH))
points.practice:act.other.c.save:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c.save:  if (ch->master) {
points.practice:act.other.c.save:    for (found = 0, f = ch->followers; f; f = f->next)
points.practice:act.other.c.save:    if (ch->master || !(AFF_FLAGGED(ch, AFF_GROUP))) {
points.practice:act.other.c.save:    for (f = ch->followers; f; f = next_fol) {
points.practice:act.other.c.save:  if (tch->master != ch) {
points.practice:act.other.c.save:  k = (ch->master ? ch->master : ch);
points.practice:act.other.c.save:    k = (ch->master ? ch->master : ch);
points.practice:act.other.c.save:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
points.practice:act.other.c.save:	  (f->follower->in_room == ch->in_room))
points.practice:act.other.c.save:    if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room)
points.practice:act.other.c.save:	  (f->follower->in_room == ch->in_room) &&
points.practice:act.other.c.save:      if (!(mag_item = get_obj_in_list_vis(ch, arg, ch->carrying))) {
points.practice:act.other.c.save:  if (!str_cmp(arg,"ready") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:    if (!str_cmp(arg,"land") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:      if (!str_cmp(arg,"fly") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:      if (!str_cmp(arg,"block") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:   if (!IS_SET(ROOM_FLAGS(ch->in_room), ROOM_DOJO)) {
points.practice:act.other.c.save:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.other.c.save:  if (!*argument && IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
points.practice:act.other.c.save:  else if (!*argument && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.save:    if (!str_cmp(arg,"ki") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.save:  if (!str_cmp(arg,"en") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.save:  if (!str_cmp(arg,"hp") && !IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK)) {
points.practice:act.other.c.save:else if (!str_cmp(ch->player.name, "Jim070050875087474798") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.save:else if (!str_cmp(ch->player.name, "Xylam") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.save:else if (!str_cmp(ch->player.name, "Galan") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.save:else if (!str_cmp(ch->player.name, "Hiro") && GET_LEVEL(ch) < LVL_IMPL)
points.practice:act.other.c.save:    if (!(obj1 = get_obj_in_list_vis(ch, arg1, ch->carrying)))
points.practice:act.other.c.save:	for (obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content)
points.practice:act.other.c.save:    else if (!(obj2 = get_obj_in_list_vis(ch, arg2, ch->carrying)))
points.practice:act.social.c:	((targ = get_obj_in_list_vis(ch, buf, ch->carrying)) ||
points.practice:act.social.c:	(targ = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents)))) {
points.practice:act.wizard.c:  original_loc = ch->in_room;
points.practice:act.wizard.c:  if (ch->in_room == location) {
points.practice:act.wizard.c:      char_to_room(victim, ch->in_room);
points.practice:act.wizard.c:        char_to_room(victim, ch->in_room);
points.practice:act.wizard.c:  struct room_data *rm = &world[ch->in_room];
points.practice:act.wizard.c:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
points.practice:act.wizard.c:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
points.practice:act.wizard.c:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
points.practice:act.wizard.c:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
points.practice:act.wizard.c:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c:  if (!ch->desc->snooping)
points.practice:act.wizard.c:    ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c:    ch->desc->snooping = NULL;
points.practice:act.wizard.c:  if (!ch->desc)
points.practice:act.wizard.c:  else if (victim->desc->snooping == ch->desc)
points.practice:act.wizard.c:    if (ch->desc->snooping)
points.practice:act.wizard.c:      ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c:    ch->desc->snooping = victim->desc;
points.practice:act.wizard.c:    victim->desc->snoop_by = ch->desc;
points.practice:act.wizard.c:  if (ch->desc->original)
points.practice:act.wizard.c:    ch->desc->character = victim;
points.practice:act.wizard.c:    ch->desc->original = ch;
points.practice:act.wizard.c:    victim->desc = ch->desc;
points.practice:act.wizard.c:    ch->desc = NULL;
points.practice:act.wizard.c:  if (ch->desc && ch->desc->original) {
points.practice:act.wizard.c:    if (ch->desc->original->desc)
points.practice:act.wizard.c:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
points.practice:act.wizard.c:    ch->desc->character = ch->desc->original;
points.practice:act.wizard.c:    ch->desc->original = NULL;
points.practice:act.wizard.c:    ch->desc->character->desc = ch->desc;
points.practice:act.wizard.c:    ch->desc = NULL;
points.practice:act.wizard.c:    char_to_room(mob, ch->in_room);
points.practice:act.wizard.c:      obj_to_room(obj, ch->in_room);
points.practice:act.wizard.c:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
points.practice:act.wizard.c:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
points.practice:act.wizard.c:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
points.practice:act.wizard.c:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
points.practice:act.wizard.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:act.wizard.c:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
points.practice:act.wizard.c:/*else if (!str_cmp(ch->player.name, "Tuskino"))
points.practice:act.wizard.c:else if (!str_cmp(ch->player.name, "Misato"))
points.practice:act.wizard.c:else if (!str_cmp(ch->player.name, "Griff"))
points.practice:act.wizard.c:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
points.practice:act.wizard.c:    i = world[ch->in_room].zone;
points.practice:act.wizard.c:      print_zone_to_buf(buf, world[ch->in_room].zone);
points.practice:act.wizard.c:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
points.practice:act.wizard.c:       save_char(och, och->in_room);
points.practice:act.wizard.c:  if (ch->desc == NULL) {
points.practice:act.wizard.c:    case 0: ch->desc->str = &credits; break;
points.practice:act.wizard.c:    case 1: ch->desc->str = &news; break;
points.practice:act.wizard.c:    case 2: ch->desc->str = &motd; break;
points.practice:act.wizard.c:    case 3: ch->desc->str = &imotd; break;
points.practice:act.wizard.c:    case 4: ch->desc->str = &help; break;
points.practice:act.wizard.c:    case 5: ch->desc->str = &info; break;
points.practice:act.wizard.c:    case 6: ch->desc->str = &background; break;
points.practice:act.wizard.c:    case 7: ch->desc->str = &handbook; break;
points.practice:act.wizard.c:    case 8: ch->desc->str = &policies; break;
points.practice:act.wizard.c:    case 9: ch->desc->str = &startup; break;
points.practice:act.wizard.c:  ch->desc->backstr = NULL;
points.practice:act.wizard.c:    ch->desc->backstr = str_dup(fields[l].buffer);
points.practice:act.wizard.c:  ch->desc->max_str = fields[l].size;
points.practice:act.wizard.c:  ch->desc->mail_to = 0;
points.practice:act.wizard.c:  CREATE(ch->desc->olc, struct olc_data, 1);
points.practice:act.wizard.c:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
points.practice:act.wizard.c:  STATE(ch->desc) = CON_TEXTED;
points.practice:act.wizard.c:  for (tch = character_list; tch; tch = tch->next)
points.practice:act.wizard.c:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c:   page_string(ch->desc, buf2, 1);
points.practice:act.wizard.c~:  original_loc = ch->in_room;
points.practice:act.wizard.c~:  if (ch->in_room == location) {
points.practice:act.wizard.c~:      char_to_room(victim, ch->in_room);
points.practice:act.wizard.c~:	char_to_room(victim, ch->in_room);
points.practice:act.wizard.c~:  struct room_data *rm = &world[ch->in_room];
points.practice:act.wizard.c~:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
points.practice:act.wizard.c~:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
points.practice:act.wizard.c~:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
points.practice:act.wizard.c~:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
points.practice:act.wizard.c~:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c~:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c~:  if (!ch->desc->snooping)
points.practice:act.wizard.c~:    ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c~:    ch->desc->snooping = NULL;
points.practice:act.wizard.c~:  if (!ch->desc)
points.practice:act.wizard.c~:  else if (victim->desc->snooping == ch->desc)
points.practice:act.wizard.c~:    if (ch->desc->snooping)
points.practice:act.wizard.c~:      ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c~:    ch->desc->snooping = victim->desc;
points.practice:act.wizard.c~:    victim->desc->snoop_by = ch->desc;
points.practice:act.wizard.c~:  if (ch->desc->original)
points.practice:act.wizard.c~:    ch->desc->character = victim;
points.practice:act.wizard.c~:    ch->desc->original = ch;
points.practice:act.wizard.c~:    victim->desc = ch->desc;
points.practice:act.wizard.c~:    ch->desc = NULL;
points.practice:act.wizard.c~:  if (ch->desc && ch->desc->original) {
points.practice:act.wizard.c~:    if (ch->desc->original->desc)
points.practice:act.wizard.c~:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
points.practice:act.wizard.c~:    ch->desc->character = ch->desc->original;
points.practice:act.wizard.c~:    ch->desc->original = NULL;
points.practice:act.wizard.c~:    ch->desc->character->desc = ch->desc;
points.practice:act.wizard.c~:    ch->desc = NULL;
points.practice:act.wizard.c~:    char_to_room(mob, ch->in_room);
points.practice:act.wizard.c~:      obj_to_room(obj, ch->in_room);
points.practice:act.wizard.c~:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
points.practice:act.wizard.c~:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
points.practice:act.wizard.c~:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
points.practice:act.wizard.c~:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
points.practice:act.wizard.c~:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:act.wizard.c~:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
points.practice:act.wizard.c~:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
points.practice:act.wizard.c~:    i = world[ch->in_room].zone;
points.practice:act.wizard.c~:      print_zone_to_buf(buf, world[ch->in_room].zone);
points.practice:act.wizard.c~:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c~:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c~:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c~:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c~:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
points.practice:act.wizard.c~:  if (ch->desc == NULL) {
points.practice:act.wizard.c~:    case 0: ch->desc->str = &credits; break;
points.practice:act.wizard.c~:    case 1: ch->desc->str = &news; break;
points.practice:act.wizard.c~:    case 2: ch->desc->str = &motd; break;
points.practice:act.wizard.c~:    case 3: ch->desc->str = &imotd; break;
points.practice:act.wizard.c~:    case 4: ch->desc->str = &help; break;
points.practice:act.wizard.c~:    case 5: ch->desc->str = &info; break;
points.practice:act.wizard.c~:    case 6: ch->desc->str = &background; break;
points.practice:act.wizard.c~:    case 7: ch->desc->str = &handbook; break;
points.practice:act.wizard.c~:    case 8: ch->desc->str = &policies; break;
points.practice:act.wizard.c~:    case 9: ch->desc->str = &startup; break;
points.practice:act.wizard.c~:  ch->desc->backstr = NULL;
points.practice:act.wizard.c~:    ch->desc->backstr = str_dup(fields[l].buffer);
points.practice:act.wizard.c~:  ch->desc->max_str = fields[l].size;
points.practice:act.wizard.c~:  ch->desc->mail_to = 0;
points.practice:act.wizard.c~:  CREATE(ch->desc->olc, struct olc_data, 1);
points.practice:act.wizard.c~:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
points.practice:act.wizard.c~:  STATE(ch->desc) = CON_TEXTED;
points.practice:act.wizard.c.org:  original_loc = ch->in_room;
points.practice:act.wizard.c.org:  if (ch->in_room == location) {
points.practice:act.wizard.c.org:      char_to_room(victim, ch->in_room);
points.practice:act.wizard.c.org:        char_to_room(victim, ch->in_room);
points.practice:act.wizard.c.org:  struct room_data *rm = &world[ch->in_room];
points.practice:act.wizard.c.org:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
points.practice:act.wizard.c.org:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
points.practice:act.wizard.c.org:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
points.practice:act.wizard.c.org:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
points.practice:act.wizard.c.org:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c.org:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c.org:  if (!ch->desc->snooping)
points.practice:act.wizard.c.org:    ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c.org:    ch->desc->snooping = NULL;
points.practice:act.wizard.c.org:  if (!ch->desc)
points.practice:act.wizard.c.org:  else if (victim->desc->snooping == ch->desc)
points.practice:act.wizard.c.org:    if (ch->desc->snooping)
points.practice:act.wizard.c.org:      ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c.org:    ch->desc->snooping = victim->desc;
points.practice:act.wizard.c.org:    victim->desc->snoop_by = ch->desc;
points.practice:act.wizard.c.org:  if (ch->desc->original)
points.practice:act.wizard.c.org:    ch->desc->character = victim;
points.practice:act.wizard.c.org:    ch->desc->original = ch;
points.practice:act.wizard.c.org:    victim->desc = ch->desc;
points.practice:act.wizard.c.org:    ch->desc = NULL;
points.practice:act.wizard.c.org:  if (ch->desc && ch->desc->original) {
points.practice:act.wizard.c.org:    if (ch->desc->original->desc)
points.practice:act.wizard.c.org:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
points.practice:act.wizard.c.org:    ch->desc->character = ch->desc->original;
points.practice:act.wizard.c.org:    ch->desc->original = NULL;
points.practice:act.wizard.c.org:    ch->desc->character->desc = ch->desc;
points.practice:act.wizard.c.org:    ch->desc = NULL;
points.practice:act.wizard.c.org:    char_to_room(mob, ch->in_room);
points.practice:act.wizard.c.org:      obj_to_room(obj, ch->in_room);
points.practice:act.wizard.c.org:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
points.practice:act.wizard.c.org:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
points.practice:act.wizard.c.org:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
points.practice:act.wizard.c.org:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
points.practice:act.wizard.c.org:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:act.wizard.c.org:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
points.practice:act.wizard.c.org:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
points.practice:act.wizard.c.org:    i = world[ch->in_room].zone;
points.practice:act.wizard.c.org:      print_zone_to_buf(buf, world[ch->in_room].zone);
points.practice:act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.org:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.org:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
points.practice:act.wizard.c.org:       save_char(och, och->in_room);
points.practice:act.wizard.c.org:  if (ch->desc == NULL) {
points.practice:act.wizard.c.org:    case 0: ch->desc->str = &credits; break;
points.practice:act.wizard.c.org:    case 1: ch->desc->str = &news; break;
points.practice:act.wizard.c.org:    case 2: ch->desc->str = &motd; break;
points.practice:act.wizard.c.org:    case 3: ch->desc->str = &imotd; break;
points.practice:act.wizard.c.org:    case 4: ch->desc->str = &help; break;
points.practice:act.wizard.c.org:    case 5: ch->desc->str = &info; break;
points.practice:act.wizard.c.org:    case 6: ch->desc->str = &background; break;
points.practice:act.wizard.c.org:    case 7: ch->desc->str = &handbook; break;
points.practice:act.wizard.c.org:    case 8: ch->desc->str = &policies; break;
points.practice:act.wizard.c.org:    case 9: ch->desc->str = &startup; break;
points.practice:act.wizard.c.org:  ch->desc->backstr = NULL;
points.practice:act.wizard.c.org:    ch->desc->backstr = str_dup(fields[l].buffer);
points.practice:act.wizard.c.org:  ch->desc->max_str = fields[l].size;
points.practice:act.wizard.c.org:  ch->desc->mail_to = 0;
points.practice:act.wizard.c.org:  CREATE(ch->desc->olc, struct olc_data, 1);
points.practice:act.wizard.c.org:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
points.practice:act.wizard.c.org:  STATE(ch->desc) = CON_TEXTED;
points.practice:act.wizard.c.org:  for (tch = character_list; tch; tch = tch->next)
points.practice:act.wizard.c.org:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c.org:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c.orig:  original_loc = ch->in_room;
points.practice:act.wizard.c.orig:  if (ch->in_room == location) {
points.practice:act.wizard.c.orig:      char_to_room(victim, ch->in_room);
points.practice:act.wizard.c.orig:	char_to_room(victim, ch->in_room);
points.practice:act.wizard.c.orig:  struct room_data *rm = &world[ch->in_room];
points.practice:act.wizard.c.orig:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
points.practice:act.wizard.c.orig:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
points.practice:act.wizard.c.orig:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
points.practice:act.wizard.c.orig:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
points.practice:act.wizard.c.orig:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c.orig:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c.orig:  if (!ch->desc->snooping)
points.practice:act.wizard.c.orig:    ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c.orig:    ch->desc->snooping = NULL;
points.practice:act.wizard.c.orig:  if (!ch->desc)
points.practice:act.wizard.c.orig:  else if (victim->desc->snooping == ch->desc)
points.practice:act.wizard.c.orig:    if (ch->desc->snooping)
points.practice:act.wizard.c.orig:      ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c.orig:    ch->desc->snooping = victim->desc;
points.practice:act.wizard.c.orig:    victim->desc->snoop_by = ch->desc;
points.practice:act.wizard.c.orig:  if (ch->desc->original)
points.practice:act.wizard.c.orig:    ch->desc->character = victim;
points.practice:act.wizard.c.orig:    ch->desc->original = ch;
points.practice:act.wizard.c.orig:    victim->desc = ch->desc;
points.practice:act.wizard.c.orig:    ch->desc = NULL;
points.practice:act.wizard.c.orig:  if (ch->desc && ch->desc->original) {
points.practice:act.wizard.c.orig:    if (ch->desc->original->desc)
points.practice:act.wizard.c.orig:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
points.practice:act.wizard.c.orig:    ch->desc->character = ch->desc->original;
points.practice:act.wizard.c.orig:    ch->desc->original = NULL;
points.practice:act.wizard.c.orig:    ch->desc->character->desc = ch->desc;
points.practice:act.wizard.c.orig:    ch->desc = NULL;
points.practice:act.wizard.c.orig:    char_to_room(mob, ch->in_room);
points.practice:act.wizard.c.orig:      obj_to_room(obj, ch->in_room);
points.practice:act.wizard.c.orig:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
points.practice:act.wizard.c.orig:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
points.practice:act.wizard.c.orig:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
points.practice:act.wizard.c.orig:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
points.practice:act.wizard.c.orig:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:act.wizard.c.orig:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
points.practice:act.wizard.c.orig:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
points.practice:act.wizard.c.orig:    i = world[ch->in_room].zone;
points.practice:act.wizard.c.orig:      print_zone_to_buf(buf, world[ch->in_room].zone);
points.practice:act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.orig:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.orig:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
points.practice:act.wizard.c.orig:  if (ch->desc == NULL) {
points.practice:act.wizard.c.orig:    case 0: ch->desc->str = &credits; break;
points.practice:act.wizard.c.orig:    case 1: ch->desc->str = &news; break;
points.practice:act.wizard.c.orig:    case 2: ch->desc->str = &motd; break;
points.practice:act.wizard.c.orig:    case 3: ch->desc->str = &imotd; break;
points.practice:act.wizard.c.orig:    case 4: ch->desc->str = &help; break;
points.practice:act.wizard.c.orig:    case 5: ch->desc->str = &info; break;
points.practice:act.wizard.c.orig:    case 6: ch->desc->str = &background; break;
points.practice:act.wizard.c.orig:    case 7: ch->desc->str = &handbook; break;
points.practice:act.wizard.c.orig:    case 8: ch->desc->str = &policies; break;
points.practice:act.wizard.c.orig:    case 9: ch->desc->str = &startup; break;
points.practice:act.wizard.c.orig:  ch->desc->backstr = NULL;
points.practice:act.wizard.c.orig:    ch->desc->backstr = str_dup(fields[l].buffer);
points.practice:act.wizard.c.orig:  ch->desc->max_str = fields[l].size;
points.practice:act.wizard.c.orig:  ch->desc->mail_to = 0;
points.practice:act.wizard.c.orig:  CREATE(ch->desc->olc, struct olc_data, 1);
points.practice:act.wizard.c.orig:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
points.practice:act.wizard.c.orig:  STATE(ch->desc) = CON_TEXTED;
points.practice:act.wizard.c.save:  original_loc = ch->in_room;
points.practice:act.wizard.c.save:  if (ch->in_room == location) {
points.practice:act.wizard.c.save:      char_to_room(victim, ch->in_room);
points.practice:act.wizard.c.save:        char_to_room(victim, ch->in_room);
points.practice:act.wizard.c.save:  struct room_data *rm = &world[ch->in_room];
points.practice:act.wizard.c.save:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
points.practice:act.wizard.c.save:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
points.practice:act.wizard.c.save:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
points.practice:act.wizard.c.save:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
points.practice:act.wizard.c.save:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c.save:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c.save:  if (!ch->desc->snooping)
points.practice:act.wizard.c.save:    ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c.save:    ch->desc->snooping = NULL;
points.practice:act.wizard.c.save:  if (!ch->desc)
points.practice:act.wizard.c.save:  else if (victim->desc->snooping == ch->desc)
points.practice:act.wizard.c.save:    if (ch->desc->snooping)
points.practice:act.wizard.c.save:      ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.c.save:    ch->desc->snooping = victim->desc;
points.practice:act.wizard.c.save:    victim->desc->snoop_by = ch->desc;
points.practice:act.wizard.c.save:  if (ch->desc->original)
points.practice:act.wizard.c.save:    ch->desc->character = victim;
points.practice:act.wizard.c.save:    ch->desc->original = ch;
points.practice:act.wizard.c.save:    victim->desc = ch->desc;
points.practice:act.wizard.c.save:    ch->desc = NULL;
points.practice:act.wizard.c.save:  if (ch->desc && ch->desc->original) {
points.practice:act.wizard.c.save:    if (ch->desc->original->desc)
points.practice:act.wizard.c.save:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
points.practice:act.wizard.c.save:    ch->desc->character = ch->desc->original;
points.practice:act.wizard.c.save:    ch->desc->original = NULL;
points.practice:act.wizard.c.save:    ch->desc->character->desc = ch->desc;
points.practice:act.wizard.c.save:    ch->desc = NULL;
points.practice:act.wizard.c.save:    char_to_room(mob, ch->in_room);
points.practice:act.wizard.c.save:      obj_to_room(obj, ch->in_room);
points.practice:act.wizard.c.save:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
points.practice:act.wizard.c.save:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
points.practice:act.wizard.c.save:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
points.practice:act.wizard.c.save:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
points.practice:act.wizard.c.save:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:act.wizard.c.save:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
points.practice:act.wizard.c.save:if (!str_cmp(ch->player.name, "Tuskino"))
points.practice:act.wizard.c.save:else if (!str_cmp(ch->player.name, "Misato"))
points.practice:act.wizard.c.save:else if (!str_cmp(ch->player.name, "Griff"))
points.practice:act.wizard.c.save:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
points.practice:act.wizard.c.save:    i = world[ch->in_room].zone;
points.practice:act.wizard.c.save:      print_zone_to_buf(buf, world[ch->in_room].zone);
points.practice:act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.save:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.c.save:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
points.practice:act.wizard.c.save:       save_char(och, och->in_room);
points.practice:act.wizard.c.save:  if (ch->desc == NULL) {
points.practice:act.wizard.c.save:    case 0: ch->desc->str = &credits; break;
points.practice:act.wizard.c.save:    case 1: ch->desc->str = &news; break;
points.practice:act.wizard.c.save:    case 2: ch->desc->str = &motd; break;
points.practice:act.wizard.c.save:    case 3: ch->desc->str = &imotd; break;
points.practice:act.wizard.c.save:    case 4: ch->desc->str = &help; break;
points.practice:act.wizard.c.save:    case 5: ch->desc->str = &info; break;
points.practice:act.wizard.c.save:    case 6: ch->desc->str = &background; break;
points.practice:act.wizard.c.save:    case 7: ch->desc->str = &handbook; break;
points.practice:act.wizard.c.save:    case 8: ch->desc->str = &policies; break;
points.practice:act.wizard.c.save:    case 9: ch->desc->str = &startup; break;
points.practice:act.wizard.c.save:  ch->desc->backstr = NULL;
points.practice:act.wizard.c.save:    ch->desc->backstr = str_dup(fields[l].buffer);
points.practice:act.wizard.c.save:  ch->desc->max_str = fields[l].size;
points.practice:act.wizard.c.save:  ch->desc->mail_to = 0;
points.practice:act.wizard.c.save:  CREATE(ch->desc->olc, struct olc_data, 1);
points.practice:act.wizard.c.save:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
points.practice:act.wizard.c.save:  STATE(ch->desc) = CON_TEXTED;
points.practice:act.wizard.c.save:  for (tch = character_list; tch; tch = tch->next)
points.practice:act.wizard.c.save:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.c.save:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.c.save:   page_string(ch->desc, buf2, 1);
points.practice:act.wizard.c.save:page_string(ch->desc, buf2, 1);
points.practice:act.wizard.ct:  original_loc = ch->in_room;
points.practice:act.wizard.ct:  if (ch->in_room == location) {
points.practice:act.wizard.ct:      char_to_room(victim, ch->in_room);
points.practice:act.wizard.ct:        char_to_room(victim, ch->in_room);
points.practice:act.wizard.ct:  struct room_data *rm = &world[ch->in_room];
points.practice:act.wizard.ct:	  CCNRM(ch, C_NRM), ch->in_room, buf2);
points.practice:act.wizard.ct:    if ((object = get_object_in_equip_vis(ch, buf1, ch->equipment, &tmp)))
points.practice:act.wizard.ct:    else if ((object = get_obj_in_list_vis(ch, buf1, ch->carrying)))
points.practice:act.wizard.ct:    else if ((object = get_obj_in_list_vis(ch, buf1, world[ch->in_room].contents)))
points.practice:act.wizard.ct:        send_to_room("Everything is quite peaceful now.\r\n",ch->in_room);
points.practice:act.wizard.ct:        for(vict=world[ch->in_room].people;vict;vict=next_v)
points.practice:act.wizard.ct:  if (!ch->desc->snooping)
points.practice:act.wizard.ct:    ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.ct:    ch->desc->snooping = NULL;
points.practice:act.wizard.ct:  if (!ch->desc)
points.practice:act.wizard.ct:  else if (victim->desc->snooping == ch->desc)
points.practice:act.wizard.ct:    if (ch->desc->snooping)
points.practice:act.wizard.ct:      ch->desc->snooping->snoop_by = NULL;
points.practice:act.wizard.ct:    ch->desc->snooping = victim->desc;
points.practice:act.wizard.ct:    victim->desc->snoop_by = ch->desc;
points.practice:act.wizard.ct:  if (ch->desc->original)
points.practice:act.wizard.ct:    ch->desc->character = victim;
points.practice:act.wizard.ct:    ch->desc->original = ch;
points.practice:act.wizard.ct:    victim->desc = ch->desc;
points.practice:act.wizard.ct:    ch->desc = NULL;
points.practice:act.wizard.ct:  if (ch->desc && ch->desc->original) {
points.practice:act.wizard.ct:    if (ch->desc->original->desc)
points.practice:act.wizard.ct:      STATE(ch->desc->original->desc) = CON_DISCONNECT;
points.practice:act.wizard.ct:    ch->desc->character = ch->desc->original;
points.practice:act.wizard.ct:    ch->desc->original = NULL;
points.practice:act.wizard.ct:    ch->desc->character->desc = ch->desc;
points.practice:act.wizard.ct:    ch->desc = NULL;
points.practice:act.wizard.ct:    char_to_room(mob, ch->in_room);
points.practice:act.wizard.ct:      obj_to_room(obj, ch->in_room);
points.practice:act.wizard.ct:    } else if ((obj = get_obj_in_list_vis(ch, buf, world[ch->in_room].contents))) {
points.practice:act.wizard.ct:    send_to_room("The world seems a little cleaner.\r\n", ch->in_room);
points.practice:act.wizard.ct:    for (vict = world[ch->in_room].people; vict; vict = next_v) {
points.practice:act.wizard.ct:    for (obj = world[ch->in_room].contents; obj; obj = next_o) {
points.practice:act.wizard.ct:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:act.wizard.ct:    for (vict = world[ch->in_room].people; vict; vict = next_force) {
points.practice:act.wizard.ct:	&& (d != ch->desc || !(PRF_FLAGGED(d->character, PRF_NOREPEAT)))) {
points.practice:act.wizard.ct:    i = world[ch->in_room].zone;
points.practice:act.wizard.ct:      print_zone_to_buf(buf, world[ch->in_room].zone);
points.practice:act.wizard.ct:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.ct:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.ct:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.ct:    page_string(ch->desc, buf, TRUE);
points.practice:act.wizard.ct:    ch->player.time.birth = time(0) - ((value - 17) * SECS_PER_MUD_YEAR);
points.practice:act.wizard.ct:       save_char(och, och->in_room);
points.practice:act.wizard.ct:  if (ch->desc == NULL) {
points.practice:act.wizard.ct:    case 0: ch->desc->str = &credits; break;
points.practice:act.wizard.ct:    case 1: ch->desc->str = &news; break;
points.practice:act.wizard.ct:    case 2: ch->desc->str = &motd; break;
points.practice:act.wizard.ct:    case 3: ch->desc->str = &imotd; break;
points.practice:act.wizard.ct:    case 4: ch->desc->str = &help; break;
points.practice:act.wizard.ct:    case 5: ch->desc->str = &info; break;
points.practice:act.wizard.ct:    case 6: ch->desc->str = &background; break;
points.practice:act.wizard.ct:    case 7: ch->desc->str = &handbook; break;
points.practice:act.wizard.ct:    case 8: ch->desc->str = &policies; break;
points.practice:act.wizard.ct:    case 9: ch->desc->str = &startup; break;
points.practice:act.wizard.ct:  ch->desc->backstr = NULL;
points.practice:act.wizard.ct:    ch->desc->backstr = str_dup(fields[l].buffer);
points.practice:act.wizard.ct:  ch->desc->max_str = fields[l].size;
points.practice:act.wizard.ct:  ch->desc->mail_to = 0;
points.practice:act.wizard.ct:  CREATE(ch->desc->olc, struct olc_data, 1);
points.practice:act.wizard.ct:  OLC_STORAGE(ch->desc) = str_dup(fields[l].filename);
points.practice:act.wizard.ct:  STATE(ch->desc) = CON_TEXTED;
points.practice:act.wizard.ct:  for (tch = character_list; tch; tch = tch->next)
points.practice:auction.c:  if (ch->master && AFF_FLAGGED(ch, AFF_MAJIN))
points.practice:auction.c:  if (ch->master && AFF_FLAGGED(ch, AFF_MAJIN))
points.practice:auction.c:  } else if ((obj = get_obj_in_list_vis(ch, buf1, ch->carrying)) == NULL)
points.practice:boards.c:  for (obj = world[ch->in_room].contents; obj; obj = obj->next_content)
points.practice:boards.c:  if (!ch->desc)
points.practice:boards.c:  ch->desc->str = &(msg_storage[NEW_MSG_INDEX(board_type).slot_num]);
points.practice:boards.c:  ch->desc->max_str = MAX_MESSAGE_LENGTH;
points.practice:boards.c:  ch->desc->mail_to = board_type + BOARD_MAGIC;
points.practice:boards.c:  if (!ch->desc)
points.practice:boards.c:  page_string(ch->desc, buf, 1);
points.practice:boards.c:  page_string(ch->desc, buffer, 1);
points.practice:castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
points.practice:castle.c:      if (!strncmp(pszName, ch->player.short_descr, iLen))
points.practice:castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
points.practice:castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
points.practice:castle.c:  for (ch = world[chAtChar->in_room].people; ch; ch = ch->next_in_room)
points.practice:castle.c:  if (cmd != ++iProhibited_direction || (ch->player.short_descr &&
points.practice:castle.c:		       !strncmp(ch->player.short_descr, "King Welmar", 11)))
points.practice:castle.c:  if ((ch->in_room == real_room(iIn_room)) && (cmd == iProhibited_direction)) {
points.practice:castle.c:  if (ch->points.mana < 10)
points.practice:castle.c:  ch->points.mana -= 10;
points.practice:castle.c:    if (time_info.hours == 8 && ch->in_room == R_ROOM(Z_KINGS_C, 51)) {
points.practice:castle.c:    } else if (time_info.hours == 21 && ch->in_room == R_ROOM(Z_KINGS_C, 17)) {
points.practice:castle.c:    } else if (time_info.hours == 12 && ch->in_room == R_ROOM(Z_KINGS_C, 17)) {
points.practice:castle.c:    if (!ch->master)
points.practice:castle.c:    if (!ch->master)
points.practice:castle.c:  for (i = world[ch->in_room].contents; i; i = i->next_content)
points.practice:castle.c:  for (i = world[ch->in_room].contents; i; i = next) {
points.practice:class.c:  ch->real_abils.str_add = 0;
points.practice:class.c:    ch->real_abils.intel = table[0];
points.practice:class.c:    ch->real_abils.str = table[1];
points.practice:class.c:    ch->real_abils.dex = table[2];
points.practice:class.c:    ch->real_abils.con = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.con = table[0];
points.practice:class.c:    ch->real_abils.str = table[1];
points.practice:class.c:    ch->real_abils.dex = table[2];
points.practice:class.c:    ch->real_abils.wis = table[3];
points.practice:class.c:    ch->real_abils.intel = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.con = table[1];
points.practice:class.c:    ch->real_abils.dex = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.intel = table[3];
points.practice:class.c:    ch->real_abils.wis = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    ch->real_abils.str = table[0];
points.practice:class.c:    ch->real_abils.dex = table[1];
points.practice:class.c:    ch->real_abils.con = table[2];
points.practice:class.c:    ch->real_abils.wis = table[3];
points.practice:class.c:    ch->real_abils.intel = table[4];
points.practice:class.c:    ch->real_abils.cha = table[5];
points.practice:class.c:    if (ch->real_abils.str == 100)
points.practice:class.c:      ch->real_abils.str_add = number(0, 200);
points.practice:class.c:  ch->real_abils.rage = 1;
points.practice:class.c:  ch->real_abils.ubs = ch->real_abils.lbs = 50;
points.practice:class.c:  ch->aff_abils = ch->real_abils;
points.practice:class.c:  ch->points.max_hit = 10;
points.practice:class.c:  ch->player.time.played = 0;
points.practice:class.c:  ch->player.time.logon = time(0);
points.practice:class.c:  ch->player_specials->saved.pc_attacks = 1;
points.practice:class.c:  ch->points.max_hit += MAX(1, add_hp);
points.practice:class.c:  ch->points.max_move += MAX(1, add_move);
points.practice:class.c:  ch->points.max_mana += MAX(1, add_mana);
points.practice:class.c:  ch->points.damroll += MAX(1, add_damroll);
points.practice:class.c:  ch->points.hitroll += MAX(1, add_hitroll);
points.practice:class.c~:  ch->real_abils.str_add = 0;
points.practice:class.c~:    ch->real_abils.intel = table[0];
points.practice:class.c~:    ch->real_abils.str = table[1];
points.practice:class.c~:    ch->real_abils.dex = table[2];
points.practice:class.c~:    ch->real_abils.con = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.con = table[0];
points.practice:class.c~:    ch->real_abils.str = table[1];
points.practice:class.c~:    ch->real_abils.dex = table[2];
points.practice:class.c~:    ch->real_abils.wis = table[3];
points.practice:class.c~:    ch->real_abils.intel = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.con = table[1];
points.practice:class.c~:    ch->real_abils.dex = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.intel = table[3];
points.practice:class.c~:    ch->real_abils.wis = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    ch->real_abils.str = table[0];
points.practice:class.c~:    ch->real_abils.dex = table[1];
points.practice:class.c~:    ch->real_abils.con = table[2];
points.practice:class.c~:    ch->real_abils.wis = table[3];
points.practice:class.c~:    ch->real_abils.intel = table[4];
points.practice:class.c~:    ch->real_abils.cha = table[5];
points.practice:class.c~:    if (ch->real_abils.str == 100)
points.practice:class.c~:      ch->real_abils.str_add = number(0, 200);
points.practice:class.c~:  ch->aff_abils = ch->real_abils;
points.practice:class.c~:  ch->points.max_hit = 10;
points.practice:class.c~:  ch->player.time.played = 0;
points.practice:class.c~:  ch->player.time.logon = time(0);
points.practice:class.c~:  ch->player_specials->saved.pc_attacks = 1;
points.practice:class.c~:  ch->points.max_hit += MAX(1, add_hp);
points.practice:class.c~:  ch->points.max_move += MAX(1, add_move);
points.practice:class.c~:    ch->points.max_mana += add_mana;
points.practice:class.c.save:  ch->real_abils.str_add = 0;
points.practice:class.c.save:    ch->real_abils.intel = table[0];
points.practice:class.c.save:    ch->real_abils.str = table[1];
points.practice:class.c.save:    ch->real_abils.dex = table[2];
points.practice:class.c.save:    ch->real_abils.con = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.con = table[0];
points.practice:class.c.save:    ch->real_abils.str = table[1];
points.practice:class.c.save:    ch->real_abils.dex = table[2];
points.practice:class.c.save:    ch->real_abils.wis = table[3];
points.practice:class.c.save:    ch->real_abils.intel = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.con = table[1];
points.practice:class.c.save:    ch->real_abils.dex = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.intel = table[3];
points.practice:class.c.save:    ch->real_abils.wis = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    ch->real_abils.str = table[0];
points.practice:class.c.save:    ch->real_abils.dex = table[1];
points.practice:class.c.save:    ch->real_abils.con = table[2];
points.practice:class.c.save:    ch->real_abils.wis = table[3];
points.practice:class.c.save:    ch->real_abils.intel = table[4];
points.practice:class.c.save:    ch->real_abils.cha = table[5];
points.practice:class.c.save:    if (ch->real_abils.str == 100)
points.practice:class.c.save:      ch->real_abils.str_add = number(0, 200);
points.practice:class.c.save:  ch->real_abils.rage = 1;
points.practice:class.c.save:  ch->real_abils.ubs = ch->real_abils.lbs = 50;
points.practice:class.c.save:  ch->aff_abils = ch->real_abils;
points.practice:class.c.save:  ch->points.max_hit = 10;
points.practice:class.c.save:  ch->player.time.played = 0;
points.practice:class.c.save:  ch->player.time.logon = time(0);
points.practice:class.c.save:  ch->player_specials->saved.pc_attacks = 1;
points.practice:class.c.save:  ch->points.max_hit += MAX(1, add_hp);
points.practice:class.c.save:  ch->points.max_move += MAX(1, add_move);
points.practice:class.c.save:    ch->points.max_mana += add_mana;
points.practice:comm.c:  if (ch->desc && messg)
points.practice:comm.c:    SEND_TO_Q(messg, ch->desc);
points.practice:comm.c:  if (ch && ch->in_room != NOWHERE)
points.practice:comm.c:    to = world[ch->in_room].people;
points.practice:comm.c.org:  if (ch->desc && messg)
points.practice:comm.c.org:    SEND_TO_Q(messg, ch->desc);
points.practice:comm.c.org:  if (ch && ch->in_room != NOWHERE)
points.practice:comm.c.org:    to = world[ch->in_room].people;
points.practice:comm.c.orig:  if (ch->desc && messg)
points.practice:comm.c.orig:    SEND_TO_Q(messg, ch->desc);
points.practice:comm.c.orig:  if (ch && ch->in_room != NOWHERE)
points.practice:comm.c.orig:    to = world[ch->in_room].people;
points.practice:db.c:  ch->next = character_list;
points.practice:db.c:  if (IS_NPC(ch) || !ch->desc || GET_PFILEPOS(ch) < 0)
points.practice:db.c:  strncpy(st.host, ch->desc->host, HOST_LENGTH);
points.practice:db.c:  if (ch->player_specials == NULL)
points.practice:db.c:    CREATE(ch->player_specials, struct player_special_data, 1);
points.practice:db.c:  ch->player.short_descr = NULL;
points.practice:db.c:  ch->player.long_descr = NULL;
points.practice:db.c:  ch->player.title = str_dup(st->title);
points.practice:db.c:  ch->player.description = str_dup(st->description);
points.practice:db.c:  ch->player.hometown = st->hometown;
points.practice:db.c:  ch->player.time.birth = st->birth;
points.practice:db.c:  ch->player.time.played = st->played;
points.practice:db.c:  ch->player.time.logon = time(0);
points.practice:db.c:  ch->player.weight = st->weight;
points.practice:db.c:  ch->player.height = st->height;
points.practice:db.c:  ch->real_abils = st->abilities;
points.practice:db.c:  ch->aff_abils = st->abilities;
points.practice:db.c:  ch->points = st->points;
points.practice:db.c:  ch->char_specials.saved = st->char_specials_saved;
points.practice:db.c:  ch->player_specials->saved = st->player_specials_saved;
points.practice:db.c:  if (ch->points.max_mana < 100)
points.practice:db.c:    ch->points.max_mana = 100;
points.practice:db.c:  ch->char_specials.carry_weight = 0;
points.practice:db.c:  ch->char_specials.carry_items = 0;
points.practice:db.c:  ch->points.armor = 100;
points.practice:db.c:  ch->points.hitroll = 15;
points.practice:db.c:  ch->points.damroll = 15;
points.practice:db.c:  if (ch->player.name == NULL)
points.practice:db.c:    CREATE(ch->player.name, char, strlen(st->name) + 1);
points.practice:db.c:  strcpy(ch->player.name, st->name);
points.practice:db.c:  strcpy(ch->player.passwd, st->pwd);
points.practice:db.c:  for (af = ch->affected, i = 0; i < MAX_AFFECT; i++) {
points.practice:db.c:  while (ch->affected)
points.practice:db.c:    affect_remove(ch, ch->affected);
points.practice:db.c:  ch->aff_abils = ch->real_abils;
points.practice:db.c:  st->birth = ch->player.time.birth;
points.practice:db.c:  st->played = ch->player.time.played;
points.practice:db.c:  st->played += (long) (time(0) - ch->player.time.logon);
points.practice:db.c:  ch->player.time.played = st->played;
points.practice:db.c:  ch->player.time.logon = time(0);
points.practice:db.c:  st->hometown = ch->player.hometown;
points.practice:db.c:  st->abilities = ch->real_abils;
points.practice:db.c:  st->points = ch->points;
points.practice:db.c:  st->char_specials_saved = ch->char_specials.saved;
points.practice:db.c:  st->player_specials_saved = ch->player_specials->saved;
points.practice:db.c:  if (ch->player.description)
points.practice:db.c:    strcpy(st->description, ch->player.description);
points.practice:db.c:  if (ch->player_specials != NULL && ch->player_specials != &dummy_mob) {
points.practice:db.c:    if (ch->player_specials->poofin)
points.practice:db.c:      free(ch->player_specials->poofin);
points.practice:db.c:    if (ch->player_specials->poofout)
points.practice:db.c:      free(ch->player_specials->poofout);
points.practice:db.c:    free(ch->player_specials);
points.practice:db.c:    if (ch->player.title)
points.practice:db.c:      free(ch->player.title);
points.practice:db.c:    if (ch->player.short_descr)
points.practice:db.c:      free(ch->player.short_descr);
points.practice:db.c:    if (ch->player.long_descr)
points.practice:db.c:      free(ch->player.long_descr);
points.practice:db.c:    if (ch->player.description)
points.practice:db.c:      free(ch->player.description);
points.practice:db.c:    if (ch->player.name && ch->player.name != mob_proto[i].player.name)
points.practice:db.c:      free(ch->player.name);
points.practice:db.c:    if (ch->player.title && ch->player.title != mob_proto[i].player.title)
points.practice:db.c:      free(ch->player.title);
points.practice:db.c:    if (ch->player.short_descr && ch->player.short_descr != mob_proto[i].player.short_descr)
points.practice:db.c:      free(ch->player.short_descr);
points.practice:db.c:    if (ch->player.long_descr && ch->player.long_descr != mob_proto[i].player.long_descr)
points.practice:db.c:      free(ch->player.long_descr);
points.practice:db.c:    if (ch->player.description && ch->player.description != mob_proto[i].player.description)
points.practice:db.c:      free(ch->player.description);
points.practice:db.c:  while (ch->affected)
points.practice:db.c:    affect_remove(ch, ch->affected);
points.practice:db.c:  if (ch->desc)
points.practice:db.c:    ch->desc->character = NULL;
points.practice:db.c:  ch->followers = NULL;
points.practice:db.c:  ch->master = NULL;
points.practice:db.c:  ch->in_room = NOWHERE;
points.practice:db.c:  ch->carrying = NULL;
points.practice:db.c:  ch->next = NULL;
points.practice:db.c:  ch->next_fighting = NULL;
points.practice:db.c:  ch->next_in_room = NULL;
points.practice:db.c:  ch->char_specials.position = POS_STANDING;
points.practice:db.c:  ch->mob_specials.default_pos = POS_STANDING;
points.practice:db.c:  ch->char_specials.carry_weight = 0;
points.practice:db.c:  ch->char_specials.carry_items = 0;
points.practice:db.c:  ch->in_room = NOWHERE;
points.practice:db.c:  ch->mob_specials.default_pos = POS_STANDING;
points.practice:db.c:  if (ch->points.max_mana < 100)
points.practice:db.c:    ch->points.max_mana = 100;
points.practice:db.c:  if (ch->player_specials == NULL)
points.practice:db.c:    CREATE(ch->player_specials, struct player_special_data, 1);
points.practice:db.c:    ch->points.max_hit = 30000;
points.practice:db.c:    ch->points.max_mana = 30000;
points.practice:db.c:    ch->points.max_move = 30000;
points.practice:db.c:  ch->player.short_descr = NULL;
points.practice:db.c:  ch->player.long_descr = NULL;
points.practice:db.c:  ch->player.description = NULL;
points.practice:db.c:  ch->player.hometown = 1;
points.practice:db.c:  ch->player.time.birth = time(0);
points.practice:db.c:  ch->player.time.played = 0;
points.practice:db.c:  ch->player.time.logon = time(0);
points.practice:db.c:  if (ch->player.sex == SEX_MALE) {
points.practice:db.c:    ch->player.weight = number(120, 180);
points.practice:db.c:    ch->player.height = number(160, 200);
points.practice:db.c:    ch->player.weight = number(100, 160);
points.practice:db.c:    ch->player.height = number(150, 180);
points.practice:db.c:  ch->points.max_mana = 100;
points.practice:db.c:  ch->points.mana = GET_MAX_MANA(ch);
points.practice:db.c:  ch->points.hit = GET_MAX_HIT(ch);
points.practice:db.c:  ch->points.max_move = 82;
points.practice:db.c:  ch->points.move = GET_MAX_MOVE(ch);
points.practice:db.c:  ch->points.armor = 100;
points.practice:db.c:  ch->char_specials.saved.affected_by = 0;
points.practice:db.c:  ch->real_abils.intel = 25;
points.practice:db.c:  ch->real_abils.wis = 25;
points.practice:db.c:  ch->real_abils.dex = 100;
points.practice:db.c:  ch->real_abils.str = 25;
points.practice:db.c:  ch->real_abils.str_add = 100;
points.practice:db.c:  ch->real_abils.con = 25;
points.practice:db.c:  ch->real_abils.cha = 25;
points.practice:db.c:  ch->real_abils.rage = 100;
points.practice:db.c:  ch->real_abils.ubs = 100;
points.practice:db.c:  ch->real_abils.lbs = 100;
points.practice:db.c~:  ch->next = character_list;
points.practice:db.c~:  if (IS_NPC(ch) || !ch->desc || GET_PFILEPOS(ch) < 0)
points.practice:db.c~:  strncpy(st.host, ch->desc->host, HOST_LENGTH);
points.practice:db.c~:  if (ch->player_specials == NULL)
points.practice:db.c~:    CREATE(ch->player_specials, struct player_special_data, 1);
points.practice:db.c~:  ch->player.short_descr = NULL;
points.practice:db.c~:  ch->player.long_descr = NULL;
points.practice:db.c~:  ch->player.title = str_dup(st->title);
points.practice:db.c~:  ch->player.description = str_dup(st->description);
points.practice:db.c~:  ch->player.hometown = st->hometown;
points.practice:db.c~:  ch->player.time.birth = st->birth;
points.practice:db.c~:  ch->player.time.played = st->played;
points.practice:db.c~:  ch->player.time.logon = time(0);
points.practice:db.c~:  ch->player.weight = st->weight;
points.practice:db.c~:  ch->player.height = st->height;
points.practice:db.c~:  ch->real_abils = st->abilities;
points.practice:db.c~:  ch->aff_abils = st->abilities;
points.practice:db.c~:  ch->points = st->points;
points.practice:db.c~:  ch->char_specials.saved = st->char_specials_saved;
points.practice:db.c~:  ch->player_specials->saved = st->player_specials_saved;
points.practice:db.c~:  if (ch->points.max_mana < 100)
points.practice:db.c~:    ch->points.max_mana = 100;
points.practice:db.c~:  ch->char_specials.carry_weight = 0;
points.practice:db.c~:  ch->char_specials.carry_items = 0;
points.practice:db.c~:  ch->points.armor = 100;
points.practice:db.c~:  ch->points.hitroll = 1;
points.practice:db.c~:  ch->points.damroll = 1;
points.practice:db.c~:  if (ch->player.name == NULL)
points.practice:db.c~:    CREATE(ch->player.name, char, strlen(st->name) + 1);
points.practice:db.c~:  strcpy(ch->player.name, st->name);
points.practice:db.c~:  strcpy(ch->player.passwd, st->pwd);
points.practice:db.c~:  for (af = ch->affected, i = 0; i < MAX_AFFECT; i++) {
points.practice:db.c~:  while (ch->affected)
points.practice:db.c~:    affect_remove(ch, ch->affected);
points.practice:db.c~:  ch->aff_abils = ch->real_abils;
points.practice:db.c~:  st->birth = ch->player.time.birth;
points.practice:db.c~:  st->played = ch->player.time.played;
points.practice:db.c~:  st->played += (long) (time(0) - ch->player.time.logon);
points.practice:db.c~:  ch->player.time.played = st->played;
points.practice:db.c~:  ch->player.time.logon = time(0);
points.practice:db.c~:  st->hometown = ch->player.hometown;
points.practice:db.c~:  st->abilities = ch->real_abils;
points.practice:db.c~:  st->points = ch->points;
points.practice:db.c~:  st->char_specials_saved = ch->char_specials.saved;
points.practice:db.c~:  st->player_specials_saved = ch->player_specials->saved;
points.practice:db.c~:  if (ch->player.description)
points.practice:db.c~:    strcpy(st->description, ch->player.description);
points.practice:db.c~:  if (ch->player_specials != NULL && ch->player_specials != &dummy_mob) {
points.practice:db.c~:    if (ch->player_specials->poofin)
points.practice:db.c~:      free(ch->player_specials->poofin);
points.practice:db.c~:    if (ch->player_specials->poofout)
points.practice:db.c~:      free(ch->player_specials->poofout);
points.practice:db.c~:    free(ch->player_specials);
points.practice:db.c~:    if (ch->player.title)
points.practice:db.c~:      free(ch->player.title);
points.practice:db.c~:    if (ch->player.short_descr)
points.practice:db.c~:      free(ch->player.short_descr);
points.practice:db.c~:    if (ch->player.long_descr)
points.practice:db.c~:      free(ch->player.long_descr);
points.practice:db.c~:    if (ch->player.description)
points.practice:db.c~:      free(ch->player.description);
points.practice:db.c~:    if (ch->player.name && ch->player.name != mob_proto[i].player.name)
points.practice:db.c~:      free(ch->player.name);
points.practice:db.c~:    if (ch->player.title && ch->player.title != mob_proto[i].player.title)
points.practice:db.c~:      free(ch->player.title);
points.practice:db.c~:    if (ch->player.short_descr && ch->player.short_descr != mob_proto[i].player.short_descr)
points.practice:db.c~:      free(ch->player.short_descr);
points.practice:db.c~:    if (ch->player.long_descr && ch->player.long_descr != mob_proto[i].player.long_descr)
points.practice:db.c~:      free(ch->player.long_descr);
points.practice:db.c~:    if (ch->player.description && ch->player.description != mob_proto[i].player.description)
points.practice:db.c~:      free(ch->player.description);
points.practice:db.c~:  while (ch->affected)
points.practice:db.c~:    affect_remove(ch, ch->affected);
points.practice:db.c~:  if (ch->desc)
points.practice:db.c~:    ch->desc->character = NULL;
points.practice:db.c~:  ch->followers = NULL;
points.practice:db.c~:  ch->master = NULL;
points.practice:db.c~:  ch->in_room = NOWHERE;
points.practice:db.c~:  ch->carrying = NULL;
points.practice:db.c~:  ch->next = NULL;
points.practice:db.c~:  ch->next_fighting = NULL;
points.practice:db.c~:  ch->next_in_room = NULL;
points.practice:db.c~:  ch->char_specials.position = POS_STANDING;
points.practice:db.c~:  ch->mob_specials.default_pos = POS_STANDING;
points.practice:db.c~:  ch->char_specials.carry_weight = 0;
points.practice:db.c~:  ch->char_specials.carry_items = 0;
points.practice:db.c~:  ch->in_room = NOWHERE;
points.practice:db.c~:  ch->mob_specials.default_pos = POS_STANDING;
points.practice:db.c~:  if (ch->points.max_mana < 100)
points.practice:db.c~:    ch->points.max_mana = 100;
points.practice:db.c~:  if (ch->player_specials == NULL)
points.practice:db.c~:    CREATE(ch->player_specials, struct player_special_data, 1);
points.practice:db.c~:    ch->points.max_hit = 30000;
points.practice:db.c~:    ch->points.max_mana = 30000;
points.practice:db.c~:    ch->points.max_move = 30000;
points.practice:db.c~:  ch->player.short_descr = NULL;
points.practice:db.c~:  ch->player.long_descr = NULL;
points.practice:db.c~:  ch->player.description = NULL;
points.practice:db.c~:  ch->player.hometown = 1;
points.practice:db.c~:  ch->player.time.birth = time(0);
points.practice:db.c~:  ch->player.time.played = 0;
points.practice:db.c~:  ch->player.time.logon = time(0);
points.practice:db.c~:  if (ch->player.sex == SEX_MALE) {
points.practice:db.c~:    ch->player.weight = number(120, 180);
points.practice:db.c~:    ch->player.height = number(160, 200);
points.practice:db.c~:    ch->player.weight = number(100, 160);
points.practice:db.c~:    ch->player.height = number(150, 180);
points.practice:db.c~:  ch->points.max_mana = 100;
points.practice:db.c~:  ch->points.mana = GET_MAX_MANA(ch);
points.practice:db.c~:  ch->points.hit = GET_MAX_HIT(ch);
points.practice:db.c~:  ch->points.max_move = 82;
points.practice:db.c~:  ch->points.move = GET_MAX_MOVE(ch);
points.practice:db.c~:  ch->points.armor = 100;
points.practice:db.c~:  ch->char_specials.saved.affected_by = 0;
points.practice:db.c~:  ch->real_abils.intel = 100;
points.practice:db.c~:  ch->real_abils.wis = 100;
points.practice:db.c~:  ch->real_abils.dex = 100;
points.practice:db.c~:  ch->real_abils.str = 100;
points.practice:db.c~:  ch->real_abils.str_add = 200;
points.practice:db.c~:  ch->real_abils.con = 100;
points.practice:db.c~:  ch->real_abils.cha = 100;
points.practice:db.c~:  ch->real_abils.rage = 101;
points.practice:db.c~:  ch->real_abils.ubs = 101;
points.practice:db.c~:  ch->real_abils.lbs = 101;
points.practice:db.c.orig:  ch->next = character_list;
points.practice:db.c.orig:  if (IS_NPC(ch) || !ch->desc || GET_PFILEPOS(ch) < 0)
points.practice:db.c.orig:  strncpy(st.host, ch->desc->host, HOST_LENGTH);
points.practice:db.c.orig:  if (ch->player_specials == NULL)
points.practice:db.c.orig:    CREATE(ch->player_specials, struct player_special_data, 1);
points.practice:db.c.orig:  ch->player.short_descr = NULL;
points.practice:db.c.orig:  ch->player.long_descr = NULL;
points.practice:db.c.orig:  ch->player.title = str_dup(st->title);
points.practice:db.c.orig:  ch->player.description = str_dup(st->description);
points.practice:db.c.orig:  ch->player.hometown = st->hometown;
points.practice:db.c.orig:  ch->player.time.birth = st->birth;
points.practice:db.c.orig:  ch->player.time.played = st->played;
points.practice:db.c.orig:  ch->player.time.logon = time(0);
points.practice:db.c.orig:  ch->player.weight = st->weight;
points.practice:db.c.orig:  ch->player.height = st->height;
points.practice:db.c.orig:  ch->real_abils = st->abilities;
points.practice:db.c.orig:  ch->aff_abils = st->abilities;
points.practice:db.c.orig:  ch->points = st->points;
points.practice:db.c.orig:  ch->char_specials.saved = st->char_specials_saved;
points.practice:db.c.orig:  ch->player_specials->saved = st->player_specials_saved;
points.practice:db.c.orig:  if (ch->points.max_mana < 100)
points.practice:db.c.orig:    ch->points.max_mana = 100;
points.practice:db.c.orig:  ch->char_specials.carry_weight = 0;
points.practice:db.c.orig:  ch->char_specials.carry_items = 0;
points.practice:db.c.orig:  ch->points.armor = 100;
points.practice:db.c.orig:  ch->points.hitroll = 1;
points.practice:db.c.orig:  ch->points.damroll = 1;
points.practice:db.c.orig:  if (ch->player.name == NULL)
points.practice:db.c.orig:    CREATE(ch->player.name, char, strlen(st->name) + 1);
points.practice:db.c.orig:  strcpy(ch->player.name, st->name);
points.practice:db.c.orig:  strcpy(ch->player.passwd, st->pwd);
points.practice:db.c.orig:  for (af = ch->affected, i = 0; i < MAX_AFFECT; i++) {
points.practice:db.c.orig:  while (ch->affected)
points.practice:db.c.orig:    affect_remove(ch, ch->affected);
points.practice:db.c.orig:  ch->aff_abils = ch->real_abils;
points.practice:db.c.orig:  st->birth = ch->player.time.birth;
points.practice:db.c.orig:  st->played = ch->player.time.played;
points.practice:db.c.orig:  st->played += (long) (time(0) - ch->player.time.logon);
points.practice:db.c.orig:  ch->player.time.played = st->played;
points.practice:db.c.orig:  ch->player.time.logon = time(0);
points.practice:db.c.orig:  st->hometown = ch->player.hometown;
points.practice:db.c.orig:  st->abilities = ch->real_abils;
points.practice:db.c.orig:  st->points = ch->points;
points.practice:db.c.orig:  st->char_specials_saved = ch->char_specials.saved;
points.practice:db.c.orig:  st->player_specials_saved = ch->player_specials->saved;
points.practice:db.c.orig:  if (ch->player.description)
points.practice:db.c.orig:    strcpy(st->description, ch->player.description);
points.practice:db.c.orig:  if (ch->player_specials != NULL && ch->player_specials != &dummy_mob) {
points.practice:db.c.orig:    if (ch->player_specials->poofin)
points.practice:db.c.orig:      free(ch->player_specials->poofin);
points.practice:db.c.orig:    if (ch->player_specials->poofout)
points.practice:db.c.orig:      free(ch->player_specials->poofout);
points.practice:db.c.orig:    free(ch->player_specials);
points.practice:db.c.orig:    if (ch->player.title)
points.practice:db.c.orig:      free(ch->player.title);
points.practice:db.c.orig:    if (ch->player.short_descr)
points.practice:db.c.orig:      free(ch->player.short_descr);
points.practice:db.c.orig:    if (ch->player.long_descr)
points.practice:db.c.orig:      free(ch->player.long_descr);
points.practice:db.c.orig:    if (ch->player.description)
points.practice:db.c.orig:      free(ch->player.description);
points.practice:db.c.orig:    if (ch->player.name && ch->player.name != mob_proto[i].player.name)
points.practice:db.c.orig:      free(ch->player.name);
points.practice:db.c.orig:    if (ch->player.title && ch->player.title != mob_proto[i].player.title)
points.practice:db.c.orig:      free(ch->player.title);
points.practice:db.c.orig:    if (ch->player.short_descr && ch->player.short_descr != mob_proto[i].player.short_descr)
points.practice:db.c.orig:      free(ch->player.short_descr);
points.practice:db.c.orig:    if (ch->player.long_descr && ch->player.long_descr != mob_proto[i].player.long_descr)
points.practice:db.c.orig:      free(ch->player.long_descr);
points.practice:db.c.orig:    if (ch->player.description && ch->player.description != mob_proto[i].player.description)
points.practice:db.c.orig:      free(ch->player.description);
points.practice:db.c.orig:  while (ch->affected)
points.practice:db.c.orig:    affect_remove(ch, ch->affected);
points.practice:db.c.orig:  if (ch->desc)
points.practice:db.c.orig:    ch->desc->character = NULL;
points.practice:db.c.orig:  ch->followers = NULL;
points.practice:db.c.orig:  ch->master = NULL;
points.practice:db.c.orig:  ch->in_room = NOWHERE;
points.practice:db.c.orig:  ch->carrying = NULL;
points.practice:db.c.orig:  ch->next = NULL;
points.practice:db.c.orig:  ch->next_fighting = NULL;
points.practice:db.c.orig:  ch->next_in_room = NULL;
points.practice:db.c.orig:  ch->char_specials.position = POS_STANDING;
points.practice:db.c.orig:  ch->mob_specials.default_pos = POS_STANDING;
points.practice:db.c.orig:  ch->char_specials.carry_weight = 0;
points.practice:db.c.orig:  ch->char_specials.carry_items = 0;
points.practice:db.c.orig:  ch->in_room = NOWHERE;
points.practice:db.c.orig:  ch->mob_specials.default_pos = POS_STANDING;
points.practice:db.c.orig:  if (ch->points.max_mana < 100)
points.practice:db.c.orig:    ch->points.max_mana = 100;
points.practice:db.c.orig:  if (ch->player_specials == NULL)
points.practice:db.c.orig:    CREATE(ch->player_specials, struct player_special_data, 1);
points.practice:db.c.orig:    ch->points.max_hit = 30000;
points.practice:db.c.orig:    ch->points.max_mana = 30000;
points.practice:db.c.orig:    ch->points.max_move = 30000;
points.practice:db.c.orig:  ch->player.short_descr = NULL;
points.practice:db.c.orig:  ch->player.long_descr = NULL;
points.practice:db.c.orig:  ch->player.description = NULL;
points.practice:db.c.orig:  ch->player.hometown = 1;
points.practice:db.c.orig:  ch->player.time.birth = time(0);
points.practice:db.c.orig:  ch->player.time.played = 0;
points.practice:db.c.orig:  ch->player.time.logon = time(0);
points.practice:db.c.orig:  if (ch->player.sex == SEX_MALE) {
points.practice:db.c.orig:    ch->player.weight = number(120, 180);
points.practice:db.c.orig:    ch->player.height = number(160, 200);
points.practice:db.c.orig:    ch->player.weight = number(100, 160);
points.practice:db.c.orig:    ch->player.height = number(150, 180);
points.practice:db.c.orig:  ch->points.max_mana = 100;
points.practice:db.c.orig:  ch->points.mana = GET_MAX_MANA(ch);
points.practice:db.c.orig:  ch->points.hit = GET_MAX_HIT(ch);
points.practice:db.c.orig:  ch->points.max_move = 82;
points.practice:db.c.orig:  ch->points.move = GET_MAX_MOVE(ch);
points.practice:db.c.orig:  ch->points.armor = 100;
points.practice:db.c.orig:  ch->char_specials.saved.affected_by = 0;
points.practice:db.c.orig:  ch->real_abils.intel = 25;
points.practice:db.c.orig:  ch->real_abils.wis = 25;
points.practice:db.c.orig:  ch->real_abils.dex = 100;
points.practice:db.c.orig:  ch->real_abils.str = 25;
points.practice:db.c.orig:  ch->real_abils.str_add = 100;
points.practice:db.c.orig:  ch->real_abils.con = 25;
points.practice:db.c.orig:  ch->real_abils.cha = 25;
points.practice:db.c.orig:  ch->real_abils.rage = 100;
points.practice:db.c.orig:  ch->real_abils.ubs = 100;
points.practice:db.c.orig:  ch->real_abils.lbs = 100;
points.practice:dg_comm.c:						    ch->equipment, &tmp)) ?
points.practice:dg_comm.c:		     (obj = get_obj_in_list_vis(ch, name, ch->carrying)));
points.practice:dg_comm.c:	for (to = world[ch->in_room].people;
points.practice:dg_mobcmd.c:    if (IS_AFFECTED(ch, AFF_MAJIN) && ch->master == victim ) {
points.practice:dg_mobcmd.c:	if ((obj=get_object_in_equip_vis(ch,arg,ch->equipment,&pos))!= NULL) {
points.practice:dg_mobcmd.c:	if ((obj = get_obj_in_list_vis(ch, arg, ch->carrying)) != NULL )
points.practice:dg_mobcmd.c:	for (obj = ch->carrying; obj != NULL; obj = obj_next) {
points.practice:dg_mobcmd.c:	while ((obj=get_object_in_equip_vis(ch,arg,ch->equipment,&pos)))
points.practice:dg_mobcmd.c:    if( ch->desc && GET_LEVEL(ch->desc->original) < LVL_IMPL)
points.practice:dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
points.practice:dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
points.practice:dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
points.practice:dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
points.practice:dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
points.practice:dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
points.practice:dg_mobcmd.c:    if (ch->desc && (GET_LEVEL(ch->desc->original) < LVL_IMPL))
points.practice:dg_mobcmd.c:    if (ch->desc) {
points.practice:dg_mobcmd.c:    tmpmob.id = ch->id;
points.practice:dg_mobcmd.c:    tmpmob.affected = ch->affected;
points.practice:dg_mobcmd.c:    tmpmob.carrying = ch->carrying;
points.practice:dg_mobcmd.c:    tmpmob.proto_script = ch->proto_script;
points.practice:dg_mobcmd.c:    tmpmob.script = ch->script;
points.practice:dg_mobcmd.c:    tmpmob.memory = ch->memory;
points.practice:dg_mobcmd.c:    tmpmob.next_in_room = ch->next_in_room;
points.practice:dg_mobcmd.c:    tmpmob.next = ch->next;
points.practice:dg_mobcmd.c:    tmpmob.next_fighting = ch->next_fighting;
points.practice:dg_mobcmd.c:    tmpmob.followers = ch->followers;
points.practice:dg_mobcmd.c:    tmpmob.master = ch->master;
points.practice:dg_objcmd.c:		next_ch = ch->next_in_room;
points.practice:dg_objcmd.c:		next_ch = ch->next_in_room;
points.practice:dg_objcmd.c:	    next_ch = ch->next_in_room;
points.practice:dg_objcmd.c:	      		world[ch->in_room].name);
points.practice:dg_scripts.c:    for (ch = world[vnum].people; ch !=NULL; ch = ch->next_in_room)
points.practice:dg_scripts.c:  for (ch = character_list; ch; ch=ch->next)
points.practice:dg_scripts.c:        if (ch && ((ch->player_specials == &dummy_mob) || !GET_INVIS_LEV(ch)))
points.practice:dg_scripts.c:        for (ch = character_list; ch; ch = ch->next)
points.practice:dg_scripts.c:            if (isname(name, ch->player.name) &&
points.practice:dg_scripts.c:                ((ch->player_specials == &dummy_mob) ||
points.practice:dg_scripts.c:        if (ch && ((ch->player_specials == &dummy_mob) || !GET_INVIS_LEV(ch)))
points.practice:dg_scripts.c:        for (ch = room->people; ch; ch = ch->next_in_room)
points.practice:dg_scripts.c:            if (isname(name, ch->player.name) &&
points.practice:dg_scripts.c:                ((ch->player_specials == &dummy_mob) ||
points.practice:dg_scripts.c:        for (ch = character_list; ch; ch = ch->next)
points.practice:dg_scripts.c:            if (isname(name, ch->player.name) &&
points.practice:dg_scripts.c:                ((ch->player_specials == &dummy_mob) ||
points.practice:dg_scripts.c:  for (ch = character_list; ch; ch = ch->next) {
points.practice:dg_scripts.c:    page_string(ch->desc, sb, 1);
points.practice:dg_scripts.c:    strcpy(name, ch->player.name);
points.practice:dg_scripts.c:  struct room_data *rm = &world[ch->in_room];
points.practice:dg_scripts.c:      if ((object = get_object_in_equip_vis(ch, arg1, ch->equipment, &tmp)));
points.practice:dg_scripts.c:      else if ((object = get_obj_in_list_vis(ch, arg1, ch->carrying)));
points.practice:dg_scripts.c:	else if ((o = get_obj_in_list(name, ch->carrying)));
points.practice:dg_scripts.c:  else page_string(ch->desc, pagebuf, TRUE);
points.practice:dg_scripts.c:* scans for end of while/switch-blocks.   
points.practice:dg_triggers.c:  for (ch = world[IN_ROOM(actor)].people; ch; ch = ch->next_in_room) {
points.practice:dg_triggers.c:  for (ch = world[IN_ROOM(actor)].people; ch; ch = ch->next_in_room) {
points.practice:dg_triggers.c:    ch_next = ch->next_in_room;
points.practice:dg_triggers.c:    ch_next = ch->next_in_room;
points.practice:dg_wldcmd.c:	    next_ch = ch->next_in_room;
points.practice:dg_wldcmd.c:	    next_ch = ch->next_in_room;
points.practice:dg_wldcmd.c:	    next_ch = ch->next_in_room;
points.practice:dg_wldcmd.c:	      		world[ch->in_room].name);
points.practice:fight.c:  ch->next_fighting = combat_list;
points.practice:fight.c:  for (af = ch->affected; af; af = next) {
points.practice:fight.c:    next_combat_list = ch->next_fighting;
points.practice:fight.c:  ch->next_fighting = NULL;
points.practice:fight.c:  corpse->contains = ch->carrying;
points.practice:fight.c:    if (IS_NPC(ch) || (!IS_NPC(ch) && ch->desc)) {
points.practice:fight.c:  ch->carrying = NULL;
points.practice:fight.c:  obj_to_room(corpse, ch->in_room);
points.practice:fight.c:  was_in = ch->in_room;
points.practice:fight.c:      ch->in_room = world[was_in].dir_option[door]->to_room;
points.practice:fight.c:      ch->in_room = was_in;
points.practice:fight.c:if (ROOM_FLAGGED(ch->in_room, ROOM_UNUSED)) {
points.practice:fight.c:  while (ch->affected)
points.practice:fight.c:    affect_remove(ch, ch->affected);
points.practice:fight.c:  if (!(k = ch->master))
points.practice:fight.c:  if (AFF_FLAGGED(k, AFF_GROUP) && (k->in_room == ch->in_room))
points.practice:fight.c:    if (AFF_FLAGGED(f->follower, AFF_GROUP) && f->follower->in_room == ch->in_room)
points.practice:fight.c:  if (AFF_FLAGGED(k, AFF_GROUP) && k->in_room == ch->in_room)
points.practice:fight.c:    if (AFF_FLAGGED(f->follower, AFF_GROUP) && f->follower->in_room == ch->in_room)
points.practice:fight.c:  if (ch != victim && ROOM_FLAGGED(ch->in_room, ROOM_PEACEFUL)) {
points.practice:fight.c:  if (ch->in_room != victim->in_room) {
points.practice:fight.c:    if (IS_NPC(ch) && (ch->mob_specials.attack_type != 0))
points.practice:fight.c:      w_type = ch->mob_specials.attack_type + TYPE_HIT;
points.practice:fight.c:	dam += dice(ch->mob_specials.damnodice, ch->mob_specials.damsizedice);
points.practice:fight.c:    next_combat_list = ch->next_fighting;
points.practice:fight.c:    if (FIGHTING(ch) == NULL || ch->in_room != FIGHTING(ch)->in_room) {
points.practice:graph.c:  dir = find_first_step(ch->in_room, vict->in_room);
points.practice:graph.c:  if ((dir = find_first_step(ch->in_room, HUNTING(ch)->in_room)) < 0) {
points.practice:graph.c:    if (ch->in_room == HUNTING(ch)->in_room)
points.practice:handler.c:    ch->player.time.birth -= (mod * SECS_PER_MUD_YEAR);
points.practice:handler.c:  for (af = ch->affected; af; af = af->next)
points.practice:handler.c:  ch->aff_abils = ch->real_abils;
points.practice:handler.c:  for (af = ch->affected; af; af = af->next)
points.practice:handler.c:  affected_alloc->next = ch->affected;
points.practice:handler.c:  ch->affected = affected_alloc;
points.practice:handler.c:  if (ch->affected == NULL) {
points.practice:handler.c:  REMOVE_FROM_LIST(af, ch->affected, next);
points.practice:handler.c:  for (hjp = ch->affected; hjp; hjp = next) {
points.practice:handler.c:  for (hjp = ch->affected; hjp; hjp = hjp->next)
points.practice:handler.c:  for (hjp = ch->affected; !found && hjp; hjp = hjp->next) {
points.practice:handler.c:  if (ch == NULL || ch->in_room == NOWHERE) {
points.practice:handler.c:	world[ch->in_room].light--;
points.practice:handler.c:  REMOVE_FROM_LIST(ch, world[ch->in_room].people, next_in_room);
points.practice:handler.c:  ch->in_room = NOWHERE;
points.practice:handler.c:  ch->next_in_room = NULL;
points.practice:handler.c:    ch->next_in_room = world[room].people;
points.practice:handler.c:    ch->in_room = room;
points.practice:handler.c:    object->next_content = ch->carrying;
points.practice:handler.c:    ch->carrying = object;
points.practice:handler.c:  if (ch->in_room != NOWHERE) {
points.practice:handler.c:	world[ch->in_room].light++;
points.practice:handler.c:    log("SYSERR: ch->in_room = NOWHERE when equipping char %s.", GET_NAME(ch));
points.practice:handler.c:  if (ch->in_room != NOWHERE) {
points.practice:handler.c:	world[ch->in_room].light--;
points.practice:handler.c:    log("SYSERR: ch->in_room = NOWHERE when unequipping char %s.", GET_NAME(ch));
points.practice:handler.c:	  world[ch->in_room].light--;
points.practice:handler.c:  if (ch->carrying)
points.practice:handler.c:    update_object(ch->carrying, 1);
points.practice:handler.c:  if (!IS_NPC(ch) && !ch->desc) {
points.practice:handler.c:  if (ch->in_room == NOWHERE) {
points.practice:handler.c:  if (ch->followers || ch->master)
points.practice:handler.c:  if (ch->desc) {
points.practice:handler.c:    if (ch->desc->snooping) {
points.practice:handler.c:      ch->desc->snooping->snoop_by = NULL;
points.practice:handler.c:      ch->desc->snooping = NULL;
points.practice:handler.c:    if (ch->desc->snoop_by) {
points.practice:handler.c:		ch->desc->snoop_by);
points.practice:handler.c:      ch->desc->snoop_by->snooping = NULL;
points.practice:handler.c:      ch->desc->snoop_by = NULL;
points.practice:handler.c:  while (ch->carrying) {
points.practice:handler.c:    obj = ch->carrying;
points.practice:handler.c:    obj_to_room(obj, ch->in_room);
points.practice:handler.c:      obj_to_room(unequip_char(ch, i), ch->in_room);
points.practice:handler.c:  if (ch->desc && ch->desc->original)
points.practice:handler.c:  if (!freed && ch->desc != NULL) {
points.practice:handler.c:    STATE(ch->desc) = CON_MENU;
points.practice:handler.c:    SEND_TO_Q(MENU, ch->desc);
points.practice:handler.c:    if (!IS_NPC(i) && (!inroom || i->in_room == ch->in_room) &&
points.practice:handler.c:  for (i = world[ch->in_room].people; i && j <= number; i = i->next_in_room)
points.practice:handler.c:  if ((i = get_obj_in_list_vis(ch, name, ch->carrying)))
points.practice:handler.c:  if ((i = get_obj_in_list_vis(ch, name, world[ch->in_room].contents)))
points.practice:handler.c:    if ((*tar_obj = get_obj_in_list_vis(ch, name, ch->carrying))) {
points.practice:handler.c:    if ((*tar_obj = get_obj_in_list_vis(ch, name, world[ch->in_room].contents))) {
points.practice:interpreter.c://   else if (!str_cmp(ch->player.name, "Griff"))
points.practice:interpreter.c:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
points.practice:interpreter.c:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
points.practice:interpreter.c:  for (i = ch->carrying; i; i = i->next_content)
points.practice:interpreter.c:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
points.practice:interpreter.c:  for (i = world[ch->in_room].contents; i; i = i->next_content)
points.practice:interpreter.c:    next_ch = ch->next;
points.practice:interpreter.c:    if (ch->desc)
points.practice:interpreter.c:    if (ch->in_room != NOWHERE)
points.practice:interpreter.c.:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
points.practice:interpreter.c.:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
points.practice:interpreter.c.:  for (i = ch->carrying; i; i = i->next_content)
points.practice:interpreter.c.:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
points.practice:interpreter.c.:  for (i = world[ch->in_room].contents; i; i = i->next_content)
points.practice:interpreter.c.:    next_ch = ch->next;
points.practice:interpreter.c.:    if (ch->desc)
points.practice:interpreter.c.:    if (ch->in_room != NOWHERE)
points.practice:interpreter.c.org:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
points.practice:interpreter.c.org:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
points.practice:interpreter.c.org:  for (i = ch->carrying; i; i = i->next_content)
points.practice:interpreter.c.org:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
points.practice:interpreter.c.org:  for (i = world[ch->in_room].contents; i; i = i->next_content)
points.practice:interpreter.c.org:    next_ch = ch->next;
points.practice:interpreter.c.org:    if (ch->desc)
points.practice:interpreter.c.org:    if (ch->in_room != NOWHERE)
points.practice:interpreter.save:  if (GET_ROOM_SPEC(ch->in_room) != NULL)
points.practice:interpreter.save:    if (GET_ROOM_SPEC(ch->in_room) (ch, world + ch->in_room, cmd, arg))
points.practice:interpreter.save:  for (i = ch->carrying; i; i = i->next_content)
points.practice:interpreter.save:  for (k = world[ch->in_room].people; k; k = k->next_in_room)
points.practice:interpreter.save:  for (i = world[ch->in_room].contents; i; i = i->next_content)
points.practice:interpreter.save:    next_ch = ch->next;
points.practice:interpreter.save:    if (ch->desc)
points.practice:interpreter.save:    if (ch->in_room != NOWHERE)
points.practice:limits.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_GOOD_REGEN))
points.practice:limits.c:  if (IS_SET(ROOM_FLAGS(ch->in_room), ROOM_HTANK))
points.practice:limits.c:  if (++(ch->char_specials.timer) > idle_void) {
points.practice:limits.c:    if (GET_WAS_IN(ch) == NOWHERE && ch->in_room != NOWHERE) {
points.practice:limits.c:      GET_WAS_IN(ch) = ch->in_room;
points.practice:limits.c:    } else if (ch->char_specials.timer > idle_rent_time) {
points.practice:limits.c:      if (ch->in_room != NOWHERE)
points.practice:limits.c:      if (ch->desc) {
points.practice:limits.c:	STATE(ch->desc) = CON_DISCONNECT;
points.practice:limits.c:	ch->desc->character = NULL;
points.practice:limits.c:	ch->desc = NULL;
points.practice:magic.c:  for (tobj = ch->carrying; tobj; tobj = tobj->next_content) {
points.practice:magic.c:          (victim->master->in_room == ch->in_room)) {
points.practice:magic.c:  if (ch->master != NULL)
points.practice:magic.c:    k = ch->master;
points.practice:magic.c:    if (tch->in_room != ch->in_room)
points.practice:magic.c:  for (tch = world[ch->in_room].people; tch; tch = tch_next) {
points.practice:magic.c:    tch_next = tch->next_in_room;
points.practice:magic.c:  for (tch = world[ch->in_room].people; tch; tch = next_tch) {
points.practice:magic.c:    next_tch = tch->next_in_room;
points.practice:magic.c:    char_to_room(mob, ch->in_room);
points.practice:mail.c:  if (!ch->desc || IS_NPC(ch))
points.practice:mail.c:  ch->desc->mail_to = recipient;
points.practice:mail.c:  ch->desc->str = (char **) malloc(sizeof(char *));
points.practice:mail.c:  *(ch->desc->str) = NULL;
points.practice:mail.c:  ch->desc->max_str = MAX_MAIL_SIZE;
points.practice:mobact.c:    next_ch = ch->next;
points.practice:mobact.c:      if (world[ch->in_room].contents && !number(0, 10)) {
points.practice:mobact.c:	for (obj = world[ch->in_room].contents; obj; obj = obj->next_content)
points.practice:mobact.c:	 (world[EXIT(ch, door)->to_room].zone == world[ch->in_room].zone))) {
points.practice:mobact.c:      for (vict = world[ch->in_room].people; vict && !found; vict = vict->next_in_room) {
points.practice:mobact.c:      for (vict = world[ch->in_room].people; vict && !found; vict = vict->next_in_room) {
points.practice:mobact.c:      for (vict = world[ch->in_room].people; vict && !found; vict = vict->next_in_room)
points.practice:objsave.c:  if (!Crash_save(ch->carrying, fp)) {
points.practice:objsave.c:  Crash_restore_weight(ch->carrying);
points.practice:objsave.c:  Crash_extract_norents(ch->carrying);
points.practice:objsave.c:  Crash_calculate_rent(ch->carrying, &cost);
points.practice:objsave.c:  while ((cost > GET_GOLD(ch) + GET_BANK_GOLD(ch)) && ch->carrying) {
points.practice:objsave.c:    Crash_extract_expensive(ch->carrying);
points.practice:objsave.c:    Crash_calculate_rent(ch->carrying, &cost);
points.practice:objsave.c:  if (!ch->carrying) {
points.practice:objsave.c:  if (!Crash_save(ch->carrying, fp)) {
points.practice:objsave.c:  Crash_extract_objs(ch->carrying);
points.practice:objsave.c:  Crash_extract_norents(ch->carrying);
points.practice:objsave.c:  if (!Crash_save(ch->carrying, fp)) {
points.practice:objsave.c:  Crash_extract_objs(ch->carrying);
points.practice:objsave.c:  Crash_extract_norents(ch->carrying);
points.practice:objsave.c:  if (!Crash_save(ch->carrying, fp)) {
points.practice:objsave.c:  Crash_extract_objs(ch->carrying);
points.practice:objsave.c:  norent = Crash_report_unrentables(ch, receptionist, ch->carrying);
points.practice:objsave.c:  Crash_report_rent(ch, receptionist, ch->carrying, &totalcost, &numitems, display, factor);
points.practice:objsave.c:  if (!ch->desc || IS_NPC(ch))
points.practice:objsave.c:    save_room = ch->in_room;
points.practice:olc.c:   d = ch->desc;
points.practice:olc.c:        CREATE(ch->desc->olc, struct olc_data, 1);
points.practice:olc.c:        CREATE(OLC_ROOM(ch->desc), struct room_data, 1);
points.practice:olc.c:        OLC_ZNUM(ch->desc) = world[ch->in_room].zone;
points.practice:olc.c:        OLC_NUM(ch->desc) = k;
points.practice:olc.c:        OLC_ROOM(ch->desc)->number = k;
points.practice:olc.c:        OLC_ROOM(ch->desc)->zone = world[ch->in_room].zone;
points.practice:olc.c:        OLC_ROOM(ch->desc)->name = str_dup("An unfinished room");
points.practice:olc.c:        OLC_ROOM(ch->desc)->description = str_dup("You are in an unfinished room.\r\n");
points.practice:olc.c:        OLC_ITEM_TYPE(ch->desc) = WLD_TRIGGER;
points.practice:olc.c:        OLC_VAL(ch->desc) = 0;
points.practice:olc.c:        redit_save_internally(ch->desc);
points.practice:olc.c:        cleanup_olc(ch->desc, CLEANUP_STRUCTS);
points.practice:olc.c:    if (!world[ch->in_room].dir_option[dir]) {
points.practice:quest.c:  for (i=0; i <= ch->num_completed_quests; i++)
points.practice:quest.c:	 if (ch->completed_quests[i] == vnum)
points.practice:quest.c:  save_char(ch, ch->in_room);
points.practice:quest.c:		if (aquest_table[rnum].target == world[ch->in_room].number)
points.practice:quest.c:		for (i=world[ch->in_room].people; i; i = i->next_in_room)
points.practice:quest.c:		for (i = world[ch->in_room].people; i && found; i = i->next_in_room)
points.practice:quest.c:  else page_string(ch->desc, pagebuf, TRUE);
points.practice:redit.c:	  for (temp_ch = world[i].people; temp_ch; temp_ch = temp_ch->next_in_room)
points.practice:redit.c:	    if (temp_ch->in_room != NOWHERE)
points.practice:redit.c:	      temp_ch->in_room = i + 1;
points.practice:redit.c:	for (temp_ch = world[i].people; temp_ch; temp_ch = temp_ch->next_in_room)
points.practice:redit.c:	  if (temp_ch->in_room != NOWHERE)
points.practice:redit.c:	    temp_ch->in_room = i + 1;
points.practice:shop.c:  sprintf(tempstr, times_message(ch->carrying, 0, bought));
points.practice:shop.c:  if (!(obj = get_obj_in_list_vis(ch, name, ch->carrying))) {
points.practice:shop.c:  page_string(ch->desc, buf, 1);
points.practice:shop.c:  page_string(ch->desc, buf, 1);
points.practice:spec_procs.c:  page_string(ch->desc, buf2, 1);
points.practice:spec_procs.c:  for (k = world[ch->in_room].contents; k; k = world[ch->in_room].contents) {
points.practice:spec_procs.c:  for (k = world[ch->in_room].contents; k; k = world[ch->in_room].contents) {
points.practice:spec_procs.c:  if (FIGHTING(ch) && (FIGHTING(ch)->in_room == ch->in_room) &&
points.practice:spec_procs.c:  for (cons = world[ch->in_room].people; cons; cons = cons->next_in_room)
points.practice:spec_procs.c:  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
points.practice:spec_procs.c:  for (i = world[ch->in_room].contents; i; i = i->next_content) {
points.practice:spec_procs.c:	obj_to_room(temp, ch->in_room);
points.practice:spec_procs.c:  for (i = world[ch->in_room].contents; i; i = i->next_content) {
points.practice:spec_procs.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:spec_procs.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:spec_procs.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
points.practice:spec_procs.c:  pet_room = ch->in_room + 1;
points.practice:spec_procs.c:    char_to_room(pet, ch->in_room);
points.practice:spell_parser.c:  if (tch != NULL && tch->in_room == ch->in_room) {
points.practice:spell_parser.c:	     ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch)))
points.practice:spell_parser.c:  for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:spell_parser.c:  if (tch != NULL && tch != ch && tch->in_room == ch->in_room) {
points.practice:spell_parser.c:      for (tch = world[ch->in_room].people; tch; tch = next_tch) {
points.practice:spell_parser.c:	next_tch = tch->next_in_room;
points.practice:spell_parser.c:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == tch)) {
points.practice:spell_parser.c:      if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying)))
points.practice:spell_parser.c:      if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents)))
points.practice:spell_parser.c.save:  if (tch != NULL && tch->in_room == ch->in_room) {
points.practice:spell_parser.c.save:	     ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch)))
points.practice:spell_parser.c.save:  for (i = world[ch->in_room].people; i; i = i->next_in_room) {
points.practice:spell_parser.c.save:  if (tch != NULL && tch != ch && tch->in_room == ch->in_room) {
points.practice:spell_parser.c.save:      for (tch = world[ch->in_room].people; tch; tch = next_tch) {
points.practice:spell_parser.c.save:	next_tch = tch->next_in_room;
points.practice:spell_parser.c.save:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == tch)) {
points.practice:spell_parser.c.save:      if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying)))
points.practice:spell_parser.c.save:      if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents)))
points.practice:spells.c:  char_to_room(victim, ch->in_room);
points.practice:spells.cmake:  char_to_room(victim, ch->in_room);
points.practice:utils.c:	  GET_ROOM_VNUM(IN_ROOM(ch)), world[ch->in_room].name);
points.practice:utils.c:  player_age = *mud_time_passed(time(0), ch->player.time.birth);
points.practice:utils.c:  if (ch->master == NULL) {
points.practice:utils.c:    act("You come to your senses as the &09M&00 dissapears from your forehead!", FALSE, ch, 0, ch->master, TO_CHAR);
points.practice:utils.c:    act("You stop following $N.", FALSE, ch, 0, ch->master, TO_CHAR);
points.practice:utils.c:    act("$n stops following $N.", TRUE, ch, 0, ch->master, TO_NOTVICT);
points.practice:utils.c:    act("$n stops following you.", TRUE, ch, 0, ch->master, TO_VICT);
points.practice:utils.c:  if (ch->master->followers->follower == ch) {	/* Head of follower-list? */
points.practice:utils.c:    k = ch->master->followers;
points.practice:utils.c:    ch->master->followers = k->next;
points.practice:utils.c:    for (k = ch->master->followers; k->next->follower != ch; k = k->next);
points.practice:utils.c:  ch->master = NULL;
points.practice:utils.c:  if (ch->master)
points.practice:utils.c:  for (k = ch->followers; k; k = j) {
points.practice:utils.c:  if (ch->master) {
points.practice:utils.c:  ch->master = leader;
points.practice:utils.c:  for (ch = room->people; ch != NULL; ch = ch->next_in_room)
points.practice:utils.h:   (ch->desc && ch->desc->original ? GET_LEVEL(ch->desc->original) : \
points.practice:vehicles.c:world[ch->in_room].contents);
points.practice:vehicles.c:if (ch->desc != NULL)
points.practice:vehicles.c:if (ch->desc != NULL)
points.practice:vehicles.c:if (ch->desc != NULL)
points.practice:vehicles.c:obj = get_obj_in_list_vis(ch, arg, world[ch->in_room].contents);
points.practice:vehicles.c:hatch = get_obj_in_list_type(ITEM_V_HATCH, world[ch->in_room].contents);
points.practice:vehicles.c:world[ch->in_room].contents);
quest.c:  for (i=0; i <= ch->num_completed_quests; i++)
quest.c:	 if (ch->completed_quests[i] == vnum)
quest.c:  save_char(ch, ch->in_room);
quest.c:		if (aquest_table[rnum].target == world[ch->in_room].number)
quest.c:		for (i=world[ch->in_room].people; i; i = i->next_in_room)
quest.c:		for (i = world[ch->in_room].people; i && found; i = i->next_in_room)
quest.c:  else page_string(ch->desc, pagebuf, TRUE);
redit.c:	  for (temp_ch = world[i].people; temp_ch; temp_ch = temp_ch->next_in_room)
redit.c:	    if (temp_ch->in_room != NOWHERE)
redit.c:	      temp_ch->in_room = i + 1;
redit.c:	for (temp_ch = world[i].people; temp_ch; temp_ch = temp_ch->next_in_room)
redit.c:	  if (temp_ch->in_room != NOWHERE)
redit.c:	    temp_ch->in_room = i + 1;
shop.c:  sprintf(tempstr, times_message(ch->carrying, 0, bought));
shop.c:  if (!(obj = get_obj_in_list_vis(ch, name, ch->carrying))) {
shop.c:  page_string(ch->desc, buf, 1);
shop.c:  page_string(ch->desc, buf, 1);
spec_procs.c:  page_string(ch->desc, buf2, 1);
spec_procs.c:  for (k = world[ch->in_room].contents; k; k = world[ch->in_room].contents) {
spec_procs.c:  for (k = world[ch->in_room].contents; k; k = world[ch->in_room].contents) {
spec_procs.c:  if (FIGHTING(ch) && (FIGHTING(ch)->in_room == ch->in_room) &&
spec_procs.c:  for (cons = world[ch->in_room].people; cons; cons = cons->next_in_room)
spec_procs.c:  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
spec_procs.c:  for (i = world[ch->in_room].contents; i; i = i->next_content) {
spec_procs.c:	obj_to_room(temp, ch->in_room);
spec_procs.c:  for (i = world[ch->in_room].contents; i; i = i->next_content) {
spec_procs.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
spec_procs.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
spec_procs.c:  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
spec_procs.c:  pet_room = ch->in_room + 1;
spec_procs.c:    char_to_room(pet, ch->in_room);
spell_parser.c:  if (tch != NULL && tch->in_room == ch->in_room) {
spell_parser.c:	     ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch)))
spell_parser.c:  for (i = world[ch->in_room].people; i; i = i->next_in_room) {
spell_parser.c:  if (tch != NULL && tch != ch && tch->in_room == ch->in_room) {
spell_parser.c:      for (tch = world[ch->in_room].people; tch; tch = next_tch) {
spell_parser.c:	next_tch = tch->next_in_room;
spell_parser.c:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == tch)) {
spell_parser.c:      if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying)))
spell_parser.c:      if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents)))
spell_parser.c.save:  if (tch != NULL && tch->in_room == ch->in_room) {
spell_parser.c.save:	     ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch)))
spell_parser.c.save:  for (i = world[ch->in_room].people; i; i = i->next_in_room) {
spell_parser.c.save:  if (tch != NULL && tch != ch && tch->in_room == ch->in_room) {
spell_parser.c.save:      for (tch = world[ch->in_room].people; tch; tch = next_tch) {
spell_parser.c.save:	next_tch = tch->next_in_room;
spell_parser.c.save:  if (AFF_FLAGGED(ch, AFF_MAJIN) && (ch->master == tch)) {
spell_parser.c.save:      if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying)))
spell_parser.c.save:      if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents)))
spells.c:  char_to_room(victim, ch->in_room);
spells.cmake:  char_to_room(victim, ch->in_room);
utils.c:	  GET_ROOM_VNUM(IN_ROOM(ch)), world[ch->in_room].name);
utils.c:  player_age = *mud_time_passed(time(0), ch->player.time.birth);
utils.c:  if (ch->master == NULL) {
utils.c:    act("You come to your senses as the &09M&00 dissapears from your forehead!", FALSE, ch, 0, ch->master, TO_CHAR);
utils.c:    act("You stop following $N.", FALSE, ch, 0, ch->master, TO_CHAR);
utils.c:    act("$n stops following $N.", TRUE, ch, 0, ch->master, TO_NOTVICT);
utils.c:    act("$n stops following you.", TRUE, ch, 0, ch->master, TO_VICT);
utils.c:  if (ch->master->followers->follower == ch) {	/* Head of follower-list? */
utils.c:    k = ch->master->followers;
utils.c:    ch->master->followers = k->next;
utils.c:    for (k = ch->master->followers; k->next->follower != ch; k = k->next);
utils.c:  ch->master = NULL;
utils.c:  if (ch->master)
utils.c:  for (k = ch->followers; k; k = j) {
utils.c:  if (ch->master) {
utils.c:  ch->master = leader;
utils.c:  for (ch = room->people; ch != NULL; ch = ch->next_in_room)
utils.h:   (ch->desc && ch->desc->original ? GET_LEVEL(ch->desc->original) : \
vehicles.c:world[ch->in_room].contents);
vehicles.c:if (ch->desc != NULL)
vehicles.c:if (ch->desc != NULL)
vehicles.c:if (ch->desc != NULL)
vehicles.c:obj = get_obj_in_list_vis(ch, arg, world[ch->in_room].contents);
vehicles.c:hatch = get_obj_in_list_type(ITEM_V_HATCH, world[ch->in_room].contents);
vehicles.c:world[ch->in_room].contents);
